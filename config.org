* Packaging
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer 5
    :straight (:host github :repo "rranelli/auto-package-update.el" :branch "master")
    :commands (auto-package-update-now
               auto-package-update-at-time
               auto-package-update-maybe)
    :custom
    (auto-package-update-delete-old-versions t
                                             "We already version them on
                                             git")
    (auto-package-update-prompt-before-update t
                                              "NO SURPRISES")
    (auto-package-update-interval 14
                                  "update once every 2 weeks (the count
                                  is in days)"))
#+END_SRC

* Evil
** Evil-collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after (evil)
    :straight (:host github
               :repo "emacs-evil/evil-collection"
               :branch "master")
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    ;;NOTE: note that this REQUIRES the var `evil-want-integration' to be NIL
    (evil-collection-init))
#+END_SRC

** Alignment
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :straight (:host github :repo "edkolev/evil-lion" :branch "master")
    :defer 1
    :after (evil)
    :config
    (evil-lion-mode))
#+END_SRC

** Increment and Decrement

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :straight (:host github :repo "cofi/evil-numbers" :branch "master")
    :defer 1
    :general
    (:keymaps 'normal
     "C-a"  'evil-numbers/inc-at-pt
     "C-x"  'evil-numbers/dec-at-pt))
#+END_SRC

** Evil Expat
Adds the following ex commands:

| :reverse           | reverse visually selected lines                                |
| :remove            | remove current file and its buffer                             |
| :rename NEW-PATH   | rename or move current file and its buffer                     |
| :colorscheme THEME | change emacs color theme                                       |
| :diff-orig         | get a diff of unsaved changes, like vim's common :DiffOrig     |
| :gdiff             | BRANCH git-diff current file, requires magit and vdiff-magit   |
| :gblame            | git-blame current file, requires magit                         |
| :gremove           | git remove current file, requires magit                        |
| :tyank             | copy range into tmux paste buffer, requires running under tmux |
| :tput              | paste from tmux paste nuffer, requires running under tmux      |

#+BEGIN_SRC emacs-lisp
  (use-package evil-expat
    :straight (:host github :repo "edkolev/evil-expat" :branch "master")
    :defer 1)
#+END_SRC

** Visualstar
Allows for * and # commands. which originally only worked on WORDs,
to work on a visual selection too

#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :straight (:host github :repo "bling/evil-visualstar" :branch "master")
    :after (evil)
    :config
    (global-evil-visualstar-mode))
#+END_SRC

* Text Objects
** Latex Textobjects
I appear to have stolen this from somewhere, probably because the original
package isn't being maintained or something

| Key | Description                          |
|-----+--------------------------------------|
| =$= | Inline math ($$)                     |
| =\= | Display math (=\[ \]=)               |
| =m= | TeX macros (\foo{})                  |
| =E= | Tex environments (\begin{}...\end{}) |

#+BEGIN_SRC emacs-lisp
  (use-package evil-latex-textobjects
    :defer t
    :load-path "local-packages/"
    :commands (turn-on-evil-latex-textobjects-mode)
    :general
    (:keymaps 'evil-latex-textobjects-inner-map
     "e" nil
     "E" 'evil-latex-textobjects-inner-env)
    (:keymaps 'evil-latex-textobjects-outer-map
     "e" nil
     "E" 'evil-latex-textobjects-an-env)
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-evil-latex-textobjects-mode))
#+END_SRC

** Surround text objects

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :straight (:host github :repo "emacs-evil/evil-surround" :branch "master")
    :after (evil)
    :defer 1
    :config
    (global-evil-surround-mode))
#+END_SRC

** Argument text objects

#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :straight (:host github :repo "wcsmith/evil-args" :branch "master")
    :after (evil)
    :defer 1
    :general
    (evil-inner-text-objects-map
     "a" 'evil-inner-arg)
    (evil-outer-text-objects-map
     "a" 'evil-outer-arg))
#+END_SRC

** Comment using text objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :straight (:host github :repo "linktohack/evil-commentary"
               :branch "master")
    :after (evil)
    :defer 1
    :config
    (evil-commentary-mode))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23491 21900 791656 0) :init (23491 21900 791644 0) :config (23491 21900 791296 0) :config-secs (0 0 644 0) :init-secs (0 0 5333 0) :use-package-secs (0 3 261718 0)))

** Comment Text Objects
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :straight (:host github :repo "redguardtoo/evil-nerd-commenter"
               :branch "master")
    :after (evil)
    :defer 1
    :general
    (evil-inner-text-objects-map
     "c" 'evilnc-inner-comment)
    (evil-outer-text-objects-map
     "c" 'evilnc-outer-commenter))
#+END_SRC

** Targets
#+BEGIN_SRC emacs-lisp
  (use-package targets
    :after (evil)
    :defer 1
    :straight (:host github :repo "noctuid/targets.el"
               :branch "master")
    :config
    (targets-setup t))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23491 21459 909411 0) :init (23491 21459 909406 0) :config (23491 21459 909399 0) :config-secs (0 0 208796 0) :init-secs (0 0 208835 0) :use-package-secs (0 0 477236 0)))

* Helm

** Describe Modes
#+BEGIN_SRC emacs-lisp
  (use-package helm-describe-modes
    :straight (:host github
               :repo "emacs-helm/helm-describe-modes"
               :branch "master")
    :defer t
    :general
    ("C-h m" 'helm-describe-modes))
#+END_SRC

** Describe Bindings

#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :straight (:host github
               :repo "emacs-helm/helm-descbinds"
               :branch "master")
    :defer t
    :general
    ("C-h b" 'helm-descbinds)
    :config
    (helm-descbinds-mode))
#+END_SRC

* Org Mode

** Evil Org Bindings
Full keybindings:
- https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :straight (:host github :repo "Somelauw/evil-org-mode" :branch "master")
    :defer t
    :hook (org-mode . evil-org-mode)
    :custom
    (evil-org-retain-visual-state-on-shift
     t
     "Let us chain < and > calls")
    (evil-org-use-additional-insert
     t
     "Add things like M-j to insert")
    (evil-org-special-o/O
     '(table-row)
     "Do not let o/O affect list items, throws me off")
    :general
    (evil-org-mode-map
     :states 'normal
     "g f" 'evil-org-open-links)
    :config
    (evil-org-set-key-theme '(textobjects
                              insert
                              navigation
                              additional
                              shift
                              return
                              operators
                              ;; todo
                              ;; heading
                              calendar))
    (with-eval-after-load 'org-agenda
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)
      (add-hook 'org-agenda-mode-hook 'evil-org-mode)))
#+END_SRC

** Helm Org Rifling
#+BEGIN_SRC emacs-lisp
  (use-package helm-org-rifle
    :straight (:host github :repo "alphapapa/helm-org-rifle" :branch "master")
    :after (org)
    :defer 1
    :general
    (:states 'normal
     :prefix my-default-evil-leader-key
     "o o" 'helm-org-rifle-current-buffer
     "O O" 'helm-org-rifle)
    (helm-org-rifle-map
     "C-w"  'evil-delete-backward-word
     "\\"   'helm-select-action
     "C-j"  'helm-next-line
     "C-k"  'helm-previous-line
     "C-n"  'helm-next-page
     "C-p"  'helm-previous-page
     "C-l"  'helm-next-source
     "C-h"  'helm-previous-source
     "TAB"  'helm-execute-persistent-action))
#+END_SRC

** Org Capture Bindings

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure nil ;; because org-capture is from org
    :after (org)
    :defer 1
    :commands (org-capture
               org-capture-templates)
    :general
    (:prefix my-default-evil-leader-key
     :states 'normal
     "c c" '(lambda () (interactive)
              (require 'org-capture)
              (helm-org-capture-templates)))
     ;; "c j" '((lambda () (interactive) (org-capture nil "j"))
     ;;         :which-key "Capture journal entry")
     ;; "c d" '((lambda () (interactive) (org-capture nil "d"))
     ;;         :which-key "Capture daydream entry"))
    (:prefix my-default-evil-leader-key
     :keymaps 'org-capture-mode-map
     :states 'normal
     "r r" 'org-capture-refile)
    (org-capture-mode-map
     [remap evil-save-and-close]          'org-capture-finalize
     [remap evil-save-modified-and-close] 'org-capture-finalize
     [remap evil-quit]                    'org-capture-kill)
    :init
    ;; (defun my-capture-daydream ()
    ;;   ""
    ;;   (interactive)
    ;;   (org-capture nil "d")
    ;; (evil-ex-define-cmd "todo" 'my-capture-daydream)
    :config
    ;; when inserting a heading immediately go into insert mode
    (add-hook 'org-capture-mode-hook 'evil-insert-state))
    ;; (when (boundp 'my-journal-org-file)
    ;;   (add-to-list 'org-capture-templates
    ;;                `("j" "Journal Entry" entry
    ;;                  (file ,my-journal-org-file)
    ;;                  "* %U\n%?")
    ;; (when (boundp 'my-daydream-org-file)
    ;;   (add-to-list 'org-capture-templates
    ;;                `("d" "Daydream Entry" entry
    ;;                  (file ,my-daydream-org-file)
    ;;                  "* %? \n %U"))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23491 20845 78356 0) :init (23491 20845 78014 0) :init-secs (0 0 36 0) :use-package-secs (0 0 439 0)))

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status)
    :straight (:host github :repo "magit/magit" :branch "master")
    :defer t
    :init
    (evil-ex-define-cmd "git" 'magit-status)
    :config
    (add-hook 'git-commit-setup-hook 'aggressive-fill-paragraph-mode)
    (add-hook 'git-commit-setup-hook 'markdown-mode))
#+END_SRC

** Evil bindings
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :straight (:host github
               :repo "emacs-evil/evil-magit"
               :branch "master")
    :after (magit)
    :config
    (evil-magit-init))
#+END_SRC

* Make Emacs Restartable
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :straight (:host github :repo "iqbalansari/restart-emacs" :branch "master")
    :commands (restart-emacs))
#+END_SRC

* Quality of Life
** Disable GUI Elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (window-divider-mode -1)
#+END_SRC

** Configure scratch buffer message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message
        "It is possible to commit no mistakes and still lose.
  That is not weakness. That is life.

  ")
#+END_SRC

** Configure scratch buffer initial mode
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** Require newlines at the end of all files
#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
#+END_SRC

** Disable alert sounds
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Automatically refresh buffer when underlying file is changes externally
#+BEGIN_SRC
  (global-auto-revert-mode t)
#+END_SRC

** Make window subprocess communications faster
#+BEGIN_SRC emacs-lisp
  (setq w32-pipe-read-delay 0)
#+END_SRC

** Set default tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** Make <TAB> always indent
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

** Never indent with a TAB character
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Strip Whitespace on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** After creating a new frame, immediately focus on that frame.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-make-frame-functions 'select-frame)
#+END_SRC

** Sentences should end after a single space, not two
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'sentence-end-double-space nil)
#+END_SRC

** Underscores should be considered as part of a word
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-change-major-mode-hook '(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC

** Ensure that files being edited are recoverable
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
        backup-by-copying t
        version-control t
        kept-new-versions 20
        kept-old-versions 5
        vc-make-backup-files t)
  (setq savehist-save-minibuffer-history 1
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq history-length t
        history-delete-duplicates t)
  (savehist-mode 1)
#+END_SRC

** Stretch caret to cover full width of character
http://pragmaticemacs.com/emacs/adaptive-cursor-width/
#+BEGIN_SRC emacs-lisp
  (setq x-stretch-cursor t)
#+END_SRC

** Display line numbers when editing code
#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+END_SRC

** Scroll like Vim
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1
        scroll-margin 1
        scroll-conservatively 9999)
#+END_SRC

* Display

** Prefer dark backgrounds
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'frame-background-mode 'dark)
  (set-terminal-parameter nil 'background-mode 'dark)
#+END_SRC

** Solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :defer 1
    :custom
    (solarized-use-variable-pitch nil)
    (solarized-distinct-fringe-background nil)
    (solarized-high-contrast-mode-line nil)
    (solarized-use-less-bold t)
    (solarized-use-more-italic nil)
    (solarized-scale-org-headlines nil)
    (solarized-height-minus-1 1.0)
    (solarized-height-plus-1 1.0)
    (solarized-height-plus-2 1.0)
    (solarized-height-plus-3 1.0)
    (solarized-height-plus-4 1.0)
    :config
    (load-theme 'solarized-dark t))
#+END_SRC

* Text

** Aggressive Fill Paragraph

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-fill-paragraph
    :straight (:host github :repo "davidshepherd7/aggressive-fill-paragraph-mode" :branch "master")
    :defer t
    :commands (aggressive-fill-paragraph-mode))
#+END_SRC

** Aggressive Indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :straight (:host github :repo "malabarba/aggressive-indent-mode" :branch "master")
    :defer t
    :commands (aggressive-indent-mode))
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 3
    :straight (:host github :repo "joaotavora/yasnippet" :branch "master")
    :commands (yas-minor-mode
               yas-expand-snippet)
    :general
    (yas-keymap
     "C-j" 'yas-next-field-or-maybe-expand
     "C-k" 'yas-prev-field)
    (:states 'normal
     :prefix my-default-evil-leader-key
     "s s" 'yas-new-snippet
     "s a" 'yas-insert-snippet
     "s f" 'yas-visit-snippet-file)
    (snippet-mode-map
     [remap evil-save-and-close]          'yas-load-snippet-buffer-and-close
     [remap evil-save-modified-and-close] 'yas-load-snippet-buffer-and-close
     [remap evil-quit]                    'kill-this-buffer)
    :config
    (let ((my-snippet-dir (directory-file-name
                           (concat user-init-dir "/snippets"))))
      (setq-default yas-snippet-dirs `(,my-snippet-dir)))
    (setq yas-indent-line 'auto
          yas-also-auto-indent-first-line t)
    (defun yas-with-comment (str)
      (format "%s%s%s" comment-start str comment-end))
    (yas-global-mode))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23491 17807 912103 0) :init (23491 17807 911669 0) :config (23491 17807 911661 0) :config-secs (0 0 37289 0) :init-secs (0 0 37324 0) :use-package-secs (0 0 141288 0)))

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight (:host github :repo "bbatsov/projectile" :branch "master")
    :commands (projectile-mode)
    :defer 3
    :config
    (projectile-mode))
#+END_SRC

** Helm-projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :straight (:host github :repo "bbatsov/helm-projectile" :branch "master")
    :commands (helm-projectile)
    :after (helm :and projectile)
    :general
    (:states 'normal
     "_" 'helm-projectile))
#+END_SRC

* Lisp

** Parinfer
#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :straight (:host github :repo "DogLooksGood/parinfer-mode" :branch "master")
    :defer 1
    :general
    (parinfer-mode-map
     "\"" nil) ;; let smartparens do its thing
    :custom
    (parinfer-auto-switch-indent-mode
     t
     "We prefer indent mode")
    :init
    (progn (setq parinfer-extensions
                 '(defaults       ; should be included.
                    pretty-parens  ; different paren styles for different modes.
                    evil           ; if you use evil.
                    smart-tab      ; c-b & c-f jump positions and smart shift with tab & s-tab.
                    smart-yank))))   ; yank behavior depend on mode.
#+END_SRC

** Rainbow Delimiter Mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight (:host github :repo "Fanael/rainbow-delimiters" :branch "master")
    :diminish rainbow-delimiters-mode
    :commands (rainbow-delimiters-mode))
#+END_SRC

* Clojure                                                             :major:

clojurescript-mode derives from clojure-mode

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :straight (:host github :repo "clojure-emacs/clojure-mode" :branch "master")
    :commands (clojure-mode clojurescript-mode)
    :hook ((clojure-mode . rainbow-delimiters-mode)
           (clojure-mode . parinfer-mode)
           (clojure-mode . update-evil-shift-width)))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   "<SPC>" nil ; was shadowing leader key bindings
   "SPC" nil ; was shadowing leader key bindings
   "C-l" 'dired-up-directory)
  (add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC

* Help+
- Emacswiki :: https://www.emacswiki.org/emacs/HelpPlus


These packages are from emacswiki, and are currently not being maintained.

They are being stored and loaded locally, since they are not on melpa or any
package manager

#+BEGIN_SRC emacs-lisp
  (use-package help+
    :load-path "local-packages/"
    :hook (help))
  (use-package help-macro+
    :load-path "local-packages/"
    :hook (help))
  (use-package help-mode+
    :load-path "local-packages/"
    :hook (help))
  (use-package help-fns+
    :load-path "local-packages/"
    :hook (help))
#+END_SRC

* Markdown                                                            :major:

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight (:host github :repo "jrblevin/markdown-mode" :branch "master")
    :commands (markdown-mode)
    :config
    (add-hook 'markdown-mode-hook 'orgtbl-mode))
#+END_SRC

* Dumb Jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :straight (:host github :repo "jacktasia/dumb-jump" :branch "master")
    :commands (dumb-jump-go)
    :general
    (:states 'normal
     "g d" 'dumb-jump-go))
#+END_SRC
