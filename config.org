* Packaging
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :commands (auto-package-update-now
               auto-package-update-at-time
               auto-package-update-maybe)
    :custom
    (auto-package-update-delete-old-versions t
                                             "We already version them on
                                             git")
    (auto-package-update-prompt-before-update t
                                              "NO SURPRISES")
    (auto-package-update-interval 14
                                  "update once every 2 weeks (the count
                                  is in days)"))
#+END_SRC

* Evil
** Evil-collection
    - [ ] Break up ~evil-collection-init~ so this package doesn't take forever to load

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
	:after (evil)
	:straight (:host github
			   :repo "emacs-evil/evil-collection"
			   :branch "master")
	:custom
	(evil-collection-setup-minibuffer t)
	:config
	;;NOTE: note that this REQUIRES the var `evil-want-integration' to be NIL
	(evil-collection-init))
#+END_SRC

* Helm

* Org Mode
* Make Emacs Restartable
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :straight (:host github :repo "iqbalansari/restart-emacs" :branch "master")
    :commands (restart-emacs))
#+END_SRC

* Quality of Life
** Disable GUI Elements
 #+BEGIN_SRC emacs-lisp
 (tool-bar-mode -1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (window-divider-mode -1)
 #+END_SRC

** Configure scratch buffer message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message
        "It is possible to commit no mistakes and still lose.
  That is not weakness. That is life.

  ")
#+END_SRC

** Configure scratch buffer initial mode
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

** Change "yes or no" to "y or n"
 #+BEGIN_SRC emacs-lisp
 (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

** Disable startup screen
 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 #+END_SRC

** Require newlines at the end of all files
 #+BEGIN_SRC emacs-lisp
 (setq-default require-final-newline t)
 #+END_SRC

** Disable alert sounds
 #+BEGIN_SRC emacs-lisp
 (setq ring-bell-function 'ignore)
 #+END_SRC

** Automatically refresh buffer when underlying file is changes externally
#+BEGIN_SRC
  (global-auto-revert-mode t)
#+END_SRC

** Make window subprocess communications faster
#+BEGIN_SRC emacs-lisp
  (setq w32-pipe-read-delay 0)
#+END_SRC

** Set default tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** Make <TAB> always indent
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

** Never indent with a TAB character
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Strip Whitespace on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** After creating a new frame, immediately focus on that frame.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-make-frame-functions 'select-frame)
#+END_SRC

** Sentences should end after a single space, not two
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'sentence-end-double-space nil)
#+END_SRC

** Underscores should be considered as part of a word
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-change-major-mode-hook '(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC

** Ensure that files being edited are recoverable
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
        backup-by-copying t
        version-control t
        kept-new-versions 20
        kept-old-versions 5
        vc-make-backup-files t)
  (setq savehist-save-minibuffer-history 1
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq history-length t
        history-delete-duplicates t)
  (savehist-mode 1)
#+END_SRC

** Stretch caret to cover full width of character
   http://pragmaticemacs.com/emacs/adaptive-cursor-width/
#+BEGIN_SRC emacs-lisp
  (setq x-stretch-cursor t)
#+END_SRC

** Display line numbers when editing code
#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+END_SRC

* Display

** Prefer dark backgrounds
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'frame-background-mode 'dark)
  (set-terminal-parameter nil 'background-mode 'dark)
#+END_SRC

** Solarized
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :defer 1
    :custom
    (solarized-use-variable-pitch nil)
    (solarized-distinct-fringe-background nil)
    (solarized-high-contrast-mode-line nil)
    (solarized-use-less-bold t)
    (solarized-use-more-italic nil)
    (solarized-scale-org-headlines nil)
    (solarized-height-minus-1 1.0)
    (solarized-height-plus-1 1.0)
    (solarized-height-plus-2 1.0)
    (solarized-height-plus-3 1.0)
    (solarized-height-plus-4 1.0)
    :config
    (load-theme 'solarized-dark t))
#+END_SRC

* Lisp

** Parinfer
#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :straight (:host github :repo "DogLooksGood/parinfer-mode" :branch "master")
    :general
    (parinfer-mode-map
     "\"" nil) ;; let smartparens do its thing
    :custom
    (parinfer-auto-switch-indent-mode
     t
     "We prefer indent mode")
    :init
    (progn (setq parinfer-extensions
                 '(defaults       ; should be included.
                    pretty-parens  ; different paren styles for different modes.
                    evil           ; if you use evil.
                    smart-tab      ; c-b & c-f jump positions and smart shift with tab & s-tab.
                    smart-yank))))   ; yank behavior depend on mode.
#+END_SRC

** Rainbow Delimiter Mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :commands (rainbow-delimiters-mode))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :defer 2
      :straight (:host github :repo "Fuco1/smartparens" :branch "master")
      :diminish smartparens-mode
      :commands (sp-local-pair)
      :general
      (:states 'normal
       :prefix my-default-evil-leader-key
       "." 'smartparens-mode)
      :custom
      (sp-cancel-autoskip-on-backward-movement
       nil
       "We want to maintain the chomp-like behavior of electric-pair")
      (sp-autoskip-closing-pair
       'always
       "Maintain chomp-like behavior of electric-pair")
      :config
      (require 'smartparens-config) ;; load some default configurations
      (smartparens-global-mode)
      ;;(smartparens-global-strict-mode)
      ;;(show-smartparens-global-mode)
      ;; define some helper functions
      (defun my-add-newline-and-indent-braces (&rest _)
        "adds that cool vim indent thing we always wanted"
        (newline)
        (indent-according-to-mode)
        (forward-line -1)
        (indent-according-to-mode))
      ;; update the global definitions with some indenting
      ;; I think that the nil is the flag that controls property inheritance
      ;;note: for some reason tab isn't recognised. might be yasnippet intefering.
      ;;learn to use ret for now
      (sp-pair "{" nil :post-handlers '((my-add-newline-and-indent-braces "RET")))
      (sp-pair "[" nil :post-handlers '((my-add-newline-and-indent-braces "RET")))
      (sp-pair "(" nil :post-handlers '((my-add-newline-and-indent-braces "RET"))))
#+END_SRC

#+results:

* Elisp
  package is known as elisp-mode but it reads as emacs-lisp-mode

#+BEGIN_SRC emacs-lisp
  (use-package elisp-mode
    :ensure nil
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . parinfer-mode)
           (emacs-lisp-mode . update-evil-shift-width)))
#+END_SRC
