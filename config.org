* Packaging
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package auto-package-update
    :straight (:host github :repo "rranelli/auto-package-update.el" :branch "master")
    :commands (auto-package-update-now
               auto-package-update-at-time
               auto-package-update-maybe)
    :custom
    (auto-package-update-delete-old-versions t
                                             "We already version them on
                                             git")
    (auto-package-update-prompt-before-update t
                                              "NO SURPRISES")
    (auto-package-update-interval 14
                                  "update once every 2 weeks (the count
                                  is in days)"))
#+END_SRC

* Evil
** Evil Collection
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-collection
    :after (evil)
    :straight (:host github
               :repo "emacs-evil/evil-collection"
               :branch "master")
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    ;; NOTE: note that this REQUIRES the var `evil-want-integration' to
    ;; be NIL
    (evil-collection-init))
#+END_SRC

** Alignment
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-lion
    :straight (:host github :repo "edkolev/evil-lion" :branch "master")
    :after (evil)
    :general
    (:keymaps '(normal visual)
     "gl"     'evil-lion-left
     "gL"     'evil-lion-right))
#+END_SRC

** Increment and Decrement

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-numbers
    :disabled t
    :straight (:host github :repo "cofi/evil-numbers" :branch "master")
    :general
    (:keymaps 'normal
     "C-a"  'evil-numbers/inc-at-pt
     "C-x"  'evil-numbers/dec-at-pt))
#+END_SRC

** Evil Expat
Adds the following ex commands:

| :reverse          | reverse visually selected lines                                |
| :remove            | remove current file and its buffer                             |
| :rename NEW-PATH   | rename or move current file and its buffer                     |
| :colorscheme THEME | change emacs color theme                                       |
| :diff-orig         | get a diff of unsaved changes, like vim's common :DiffOrig     |
| :gdiff             | BRANCH git-diff current file, requires magit and vdiff-magit   |
| :gblame            | git-blame current file, requires magit                         |
| :gremove           | git remove current file, requires magit                        |
| :tyank             | copy range into tmux paste buffer, requires running under tmux |
| :tput              | paste from tmux paste nuffer, requires running under tmux      |

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-expat
    :straight (:host github :repo "edkolev/evil-expat" :branch "master")
    :after (magit))
#+END_SRC

** Visualstar
Allows for * and # commands. which originally only worked on WORDs,
to work on a visual selection too

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-visualstar
    :straight (:host github :repo "bling/evil-visualstar" :branch "master")
    :general
    (:keymaps 'visual
     "*" 'evil-visualstar/begin-search-forward
     "#" 'evil-visualstar/begin-search-backward))
#+END_SRC

* Text Objects
** Latex Textobjects
I appear to have stolen this from somewhere, probably because the original
package isn't being maintained or something

| Key | Description                          |
|-----+--------------------------------------|
| =$= | Inline math ($$)                     |
| =\= | Display math (=\[ \]=)               |
| =m= | TeX macros (\foo{})                  |
| =E= | Tex environments (\begin{}...\end{}) |

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-latex-textobjects
    :load-path "local-packages/"
    :commands (turn-on-evil-latex-textobjects-mode)
    :general
    (:keymaps 'evil-latex-textobjects-inner-map
     "e" nil
     "E" 'evil-latex-textobjects-inner-env)
    (:keymaps 'evil-latex-textobjects-outer-map
     "e" nil
     "E" 'evil-latex-textobjects-an-env)
    :hook (LaTeX-mode . turn-on-evil-latex-textobjects-mode))
#+END_SRC

** Surround text objects

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-surround
    :straight (:host github :repo "emacs-evil/evil-surround" :branch "master")
    :after (evil)
    :config
    (global-evil-surround-mode))
#+END_SRC

** Argument text objects

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-args
    :straight (:host github :repo "wcsmith/evil-args" :branch "master")
    :after (evil)
    :general
    (evil-inner-text-objects-map
     "a" 'evil-inner-arg)
    (evil-outer-text-objects-map
     "a" 'evil-outer-arg))
#+END_SRC

** Comment using text objects
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-commentary
    :straight (:host github :repo "linktohack/evil-commentary" :branch "master")
    :after (evil)
    :config
    (evil-commentary-mode))
#+END_SRC

** Comment Text Objects
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-nerd-commenter
    :straight (:host github :repo "redguardtoo/evil-nerd-commenter" :branch "master")
    :after (evil)
    :general
    (evil-inner-text-objects-map
     "c" 'evilnc-inner-comment)
    (evil-outer-text-objects-map
     "c" 'evilnc-outer-commenter))
#+END_SRC

** Syntax Text Objects
Bound to "h"

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-textobj-syntax
    :straight (:host github :repo "laishulu/evil-textobj-syntax" :branch "master")
    :after evil)
#+END_SRC

** Line Text Objects
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-textobj-line
    :straight (:host github :repo "syohex/evil-textobj-line" :branch "master")
    :after evil)
#+END_SRC

** Indent text objects
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-indent-plus
    :straight (:host github :repo "TheBB/evil-indent-plus" :branch "master")
    :general
    (evil-inner-text-objects-map
     "i" 'evil-indent-plus-i-indent
     "I" 'evil-indent-plus-a-indent)
    (evil-outer-text-objects-map
     "i" 'evil-indent-plus-i-indent-up
     "I" 'evil-indent-plus-a-indent-up))
#+END_SRC

** Targets
This is an expensive package to load, and I wonder why

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package targets
    :after (evil)
    :defer 2
    :straight (:host github :repo "noctuid/targets.el" :branch "master")
    :commands (targets-inner-paren
               targets-inner-curly
               targets-a-paren
               targets-a-curly)
    :general
    (evil-inner-text-objects-map
     "b" 'targets-inner-paren
     "B" 'targets-inner-curly)
    (evil-outer-text-objects-map
     "b" 'targets-a-paren
     "B" 'targets-a-curly)
    :config
    (targets-setup t
                   :last-key nil
                   :next-key nil
                   :inside-key nil
                   :around-key nil
                   :remote-key nil))
#+END_SRC

* Helm

** Describe Modes
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-describe-modes
    :straight (:host github
               :repo "emacs-helm/helm-describe-modes"
               :branch "master")
    :general
    ("C-h m" 'helm-describe-modes))
#+END_SRC

** Describe Bindings

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-descbinds
    :straight (:host github
               :repo "emacs-helm/helm-descbinds"
               :branch "master")
    :general
    ("C-h b" 'helm-descbinds))
#+END_SRC

* Org Mode
** Evil Org Bindings
Full keybindings:
- https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org


Important bindings:

| <M-S-return> | Insert checkbox item |

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-org
    :straight (:host github :repo "Somelauw/evil-org-mode" :branch "master")
    :hook (org-mode . evil-org-mode)
    :custom
    (evil-org-retain-visual-state-on-shift
     t "Let us chain < and > calls")
    (evil-org-use-additional-insert
     t "Add things like M-j to insert")
    (evil-org-special-o/O
     '(table-row) "Do not let o/O affect list items, throws me off")
    :general
    (evil-org-mode-map
     :states 'normal
     "g f" 'evil-org-open-links)
    :config
    (evil-org-set-key-theme '(textobjects
                              insert
                              navigation
                              additional
                              shift
                              return
                              operators
                              todo
                              ;; heading
                              calendar))
    (with-eval-after-load 'org-agenda
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)
      (add-hook 'org-agenda-mode-hook 'evil-org-mode)))
#+END_SRC

** Org Capture Bindings

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-capture
    :ensure nil ;; because org-capture is from org
    :after (org)
    :commands (org-capture
               org-capture-templates)
    :general
    (:prefix my-default-evil-leader-key
     :states 'normal
     "c c" '(lambda () (interactive)
              (require 'org-capture)
              (helm-org-capture-templates)))
     ;; "c j" '((lambda () (interactive) (org-capture nil "j"))
     ;;         :which-key "Capture journal entry")
     ;; "c d" '((lambda () (interactive) (org-capture nil "d"))
     ;;         :which-key "Capture daydream entry"))
    (:prefix my-default-evil-leader-key
     :keymaps 'org-capture-mode-map
     :states 'normal
     "r r" 'org-capture-refile)
    (org-capture-mode-map
     [remap evil-save-and-close]          'org-capture-finalize
     [remap evil-save-modified-and-close] 'org-capture-finalize
     [remap evil-quit]                    'org-capture-kill)
    ;; :init
    ;; (defun my-capture-daydream ()
    ;;   ""
    ;;   (interactive)
    ;;   (org-capture nil "d")
    ;; (evil-ex-define-cmd "todo" 'my-capture-daydream)
    :hook (org-capture-mode . evil-insert-state))
    ;; when inserting a heading immediately go into insert mode
    ;; (when (boundp 'my-journal-org-file)
    ;;   (add-to-list 'org-capture-templates
    ;;                `("j" "Journal Entry" entry
    ;;                  (file ,my-journal-org-file)
    ;;                  "* %U\n%?")
    ;; (when (boundp 'my-daydream-org-file)
    ;;   (add-to-list 'org-capture-templates
    ;;                `("d" "Daydream Entry" entry
    ;;                  (file ,my-daydream-org-file)
    ;;                  "* %? \n %U"))
#+END_SRC

** COMMENT Org-Brain
Goal is to use deft as a quick grab bag, but organise closer along the
lines of org-brain

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-brain
    :straight (:host github :repo "Kungsgeten/org-brain" :branch "master")
    :init
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (when (boundp 'config-local-dropbox-folder)
      (customize-set-value 'org-brain-path
                            (concat (file-name-as-directory config-local-dropbox-folder)
                                    "notes"))))
#+END_SRC

* Git

** Magit
If magit complains about not finding the config on windows, it's
because of [[https://github.com/magit/magit/issues/1497][this issue]], the easiest solution is to make a link

: mklink %APPDATA%\.gitconfig %USERPROFILE%\.gitconfig

- [ ] Make a command that commits and pushes

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :straight (:host github :repo "magit/magit" :branch "master")
    :commands (magit-status
               magit-pull
               magit-commit)
    :init
    (evil-define-command ex-magit-cli (cmd)
      "Calls specific magit functions"
      (interactive "<a>")
      (cond
       ((string= cmd "pull") (magit-pull-from-pushremote nil))
       ((string= cmd "commit") (magit-commit))
       ((string= cmd "commit all") (magit-commit `("--all" "-m" ,(iso-8601-timestamp))))
       ((string= cmd "push") (magit-push-current-to-pushremote nil))
       ((string= cmd "commit push all") (progn
                                      (magit-commit `("--all" "-m" ,(iso-8601-timestamp)))
                                      (magit-push-current-to-pushremote nil)))
       ((string= cmd "log") (magit-log-all))
       ((or (string= cmd "status")
            (eq cmd nil)) (magit-status))
       (t (message "Command %s is not recognised" cmd))))
    (evil-ex-define-cmd "git" 'ex-magit-cli)
    :hook ((git-commit-setup . aggressive-fill-paragraph-mode)
           (git-commit-setup . markdown-mode)))
#+END_SRC

*** Evil bindings
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-magit
    :straight (:host github
               :repo "emacs-evil/evil-magit"
               :branch "master")
    :after (magit)
    :config
    (evil-magit-init))
#+END_SRC

*** Vimdiff

This invokes diff3, an external program, which we can't guarantee, so
it's disabled

For some reason the vdiff-mode-map isn't populated and does nothing.
Might have to install vdiff itself?

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package vdiff-magit
    :disabled t
    :straight (:host github :repo "justbur/emacs-vdiff-magit" :branch "master")
    :after (magit)
    :general
    (magit-mode-map
     "e" 'vdiff-magit-dwim
     "E" 'vdiff-magit-popup)
    :config
    ;; refer to the repo for comments.
    (setcdr (assoc ?e (plist-get magit-dispatch-popup :actions))
            '("vdiff dwim" 'vdiff-magit-dwim))
    (setcdr (assoc ?E (plist-get magit-dispatch-popup :actions))
            '("vdiff popup" 'vdiff-magit-popup)))
#+END_SRC

** Git Gutter

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package git-gutter+
    :straight (:host github :repo "nonsequitur/git-gutter-plus" :branch "master")
    :defer 7
    :general
    (:states  'normal
     :keymaps 'git-gutter+-mode-map
     "[ h"    'git-gutter+-previous-hunk
     "] h"    'git-gutter+-next-hunk
     "g h s"  'git-gutter+-stage-hunks
     "g h u"  'git-gutter+-revert-hunks
     "g h h"  'git-gutter+-show-hunk-inline-at-point)
    :hook (prog-mode . git-gutter+-mode)
    :init
    (use-package git-gutter-fringe+
      :straight (:host github :repo "nonsequitur/git-gutter-fringe-plus" :branch "master")
      :if (display-graphic-p)
      :after git-gutter+)
    :custom
    (git-gutter+-hide-gutter t))
#+END_SRC

** Git hunk textobjects

Look at ~git-gutter+-diffinfo-at-point~ and see if we can leverage
that for the range we want

* Make Emacs Restartable
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restart-emacs
    :straight (:host github :repo "iqbalansari/restart-emacs" :branch "master")
    :commands (restart-emacs)
    :init
    (evil-ex-define-cmd "restart" 'restart-emacs))
#+END_SRC

* Quality of Life
** Frame Transparency
#+BEGIN_SRC emacs-lisp :results output silent
  ;;;###autoload
  (defun my-set-frame-transparency (value)
    "Set the transparency of the frame window to VALUE.
  0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

** Disable GUI Elements
#+BEGIN_SRC emacs-lisp :results output silent
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (window-divider-mode -1)
#+END_SRC

** Timestamp
Emulate the best feature of notepad

#+BEGIN_SRC emacs-lisp :results output silent
  (defun iso-8601-timestamp ()
    (concat (format-time-string "%Y-%m-%d")
            "T"
            (format-time-string "%T")
            (format-time-string "%z")))
  (general-define-key
   :states '(normal insert)
    "<f5>" '(lambda () (interactive)
              (if (eq major-mode 'org-mode)
                  (org-time-stamp-inactive '(16))
                (insert (iso-8601-timestamp)))))
#+END_SRC

** Do not truncate lines
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default truncate-lines t)
#+END_SRC

** Configure scratch buffer message
#+BEGIN_SRC emacs-lisp :results output silent
    (setq initial-scratch-message
          "It is possible to commit no mistakes and still lose.
    That is not weakness. That is life.
    ,* Measure the smallest possible victory
    ,* Drill one thing at a time until it is unthinking habit.
    ,* Shorter periods of study every day beat cramming
    ,* When you are starting, try a million different things
    ,* Debrief your successes and failures
    ")
#+END_SRC

** Configure scratch buffer initial mode
#+BEGIN_SRC emacs-lisp :results output silent
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable startup screen
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

** Require newlines at the end of all files
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default require-final-newline t)
#+END_SRC

** Disable alert sounds
#+BEGIN_SRC emacs-lisp :results output silent
  (setq ring-bell-function 'ignore)
#+END_SRC

** Automatically refresh buffer when underlying file is changed externally
#+BEGIN_SRC
  (global-auto-revert-mode t)
#+END_SRC

** Make window subprocess communications faster
#+BEGIN_SRC emacs-lisp :results output silent
  (setq w32-pipe-read-delay 0)
#+END_SRC

** Set default tab width
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default tab-width 4)
#+END_SRC

** Make <TAB> always indent
#+BEGIN_SRC emacs-lisp :results output silent
  (setq tab-always-indent 'complete)
#+END_SRC

** Never indent with a TAB character
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Strip Whitespace on save
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** After creating a new frame, immediately focus on that frame.
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'after-make-frame-functions 'select-frame)
#+END_SRC

** Sentences should end after a single space, not two
#+BEGIN_SRC emacs-lisp :results output silent
  (customize-set-variable 'sentence-end-double-space nil)
#+END_SRC

** Underscores should be considered as part of a word
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'after-change-major-mode-hook '(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC

** Ensure that files being edited are recoverable
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions t
        backup-by-copying t
        version-control t
        kept-new-versions 20
        kept-old-versions 5
        vc-make-backup-files t)
  (setq savehist-save-minibuffer-history 1
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq history-length t
        history-delete-duplicates t)
  (savehist-mode 1)
#+END_SRC

** Stretch caret to cover full width of character
http://pragmaticemacs.com/emacs/adaptive-cursor-width/
#+BEGIN_SRC emacs-lisp :results output silent
  (setq x-stretch-cursor t)
#+END_SRC

** Display line numbers when editing code
#+BEGIN_SRC emacs-lisp :results output silent
  (when (>= emacs-major-version 26)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+END_SRC

** Scroll like Vim
#+BEGIN_SRC emacs-lisp :results output silent
  (setq scroll-step 1
        scroll-margin 1
        scroll-conservatively 9999)
#+END_SRC

** Activate hs-minor-mode on prog mode
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC

** Eval sexp and replace with results
Stolen from https://github.com/bbatsov/crux

#+BEGIN_SRC emacs-lisp :results output silent
  ;;;###autoload
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (let ((value (eval (elisp--preceding-sexp))))
      (backward-kill-sexp)
      (insert (format "%S" value))))
#+END_SRC
* Display

** Prefer dark backgrounds
#+BEGIN_SRC emacs-lisp :results output silent
  (customize-set-variable 'frame-background-mode 'dark)
  (set-terminal-parameter nil 'background-mode 'dark)
#+END_SRC

** Solarized
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package solarized-theme
    :defer 2
    :straight (:host github :repo "bbatsov/solarized-emacs" :branch "master")
    :custom
    (solarized-use-variable-pitch nil)
    (solarized-distinct-fringe-background nil)
    (solarized-high-contrast-mode-line nil)
    (solarized-use-less-bold t)
    (solarized-use-more-italic nil)
    (solarized-scale-org-headlines nil)
    (solarized-height-minus-1 1.0)
    (solarized-height-plus-1 1.0)
    (solarized-height-plus-2 1.0)
    (solarized-height-plus-3 1.0)
    (solarized-height-plus-4 1.0)
    :config
    (load-theme 'solarized-dark t))
#+END_SRC

* Text

** Aggressive Fill Paragraph

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package aggressive-fill-paragraph
    :straight (:host github :repo "davidshepherd7/aggressive-fill-paragraph-mode" :branch "master")
    :hook (org-mode . aggressive-fill-paragraph-mode))
#+END_SRC

** Aggressive Indent

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package aggressive-indent
    :straight (:host github :repo "malabarba/aggressive-indent-mode" :branch "master")
    :commands (aggressive-indent-mode))
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :defer 3
    :straight (:host github :repo "joaotavora/yasnippet" :branch "master")
    :commands (yas-minor-mode
               yas-expand-snippet)
    :general
    (yas-keymap
     "C-j" 'yas-next-field-or-maybe-expand
     "C-k" 'yas-prev-field)
    (:states 'normal
     :prefix my-default-evil-leader-key
     "s s" 'yas-new-snippet
     "s a" 'yas-insert-snippet
     "s f" 'yas-visit-snippet-file)
    (snippet-mode-map
     [remap evil-save-and-close]          'yas-load-snippet-buffer-and-close
     [remap evil-save-modified-and-close] 'yas-load-snippet-buffer-and-close
     [remap evil-quit]                    'kill-this-buffer)
    :config
    (let ((my-snippet-dir (at-user-init-dir "/snippets")))
      (setq-default yas-snippet-dirs `(,my-snippet-dir)))
    (setq yas-indent-line 'auto
          yas-also-auto-indent-first-line t)
    (defun yas-with-comment (str)
      (format "%s%s%s" comment-start str comment-end))
    (yas-global-mode))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :straight (:host github :repo "bbatsov/projectile" :branch "master")
    :commands (projectile-mode)
    :defer 2
    :config
    (projectile-mode))
#+END_SRC

** Helm-projectile
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-projectile
    :straight (:host github :repo "bbatsov/helm-projectile" :branch "master")
    :general
    (:states '(normal motion)
     "+" 'helm-projectile))
#+END_SRC

* Lisp

** Parinfer
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package parinfer
    :straight (:host github :repo "DogLooksGood/parinfer-mode" :branch "master")
    :commands (parinfer-mode)
    :general
    (parinfer-mode-map
     "\"" nil) ;; let smartparens do its thing
    :custom
    (parinfer-auto-switch-indent-mode
     t "We prefer indent mode")
    (parinfer-auto-switch-indent-mode-when-closing
     t)
    :init
    (progn (setq parinfer-extensions
                 '(defaults       ; should be included.
                    pretty-parens  ; different paren styles for different modes.
                    evil           ; if you use evil.
                    smart-tab      ; c-b & c-f jump positions and smart shift with tab & s-tab.
                    smart-yank))))   ; yank behavior depend on mode.
#+END_SRC

** Rainbow Delimiter Mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-delimiters
    :straight (:host github :repo "Fanael/rainbow-delimiters" :branch "master")
    :commands (rainbow-delimiters-mode)
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Rainbow Identifiers Mode

It looks fairly jarring to be very honest.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-identifiers
    :straight (:host github :repo "Fanael/rainbow-identifiers" :branch "master")
    :commands (rainbow-identifiers-mode))
#+END_SRC

** Smartparens

TODO: Make it so that if the point is inside {} or something similar,
pressing RET autoformats it, instead of doing nothing as it does right now

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package smartparens
    :defer 2
    :straight (:host github :repo "Fuco1/smartparens" :branch "master")
    :diminish smartparens-mode
    :commands (sp-local-pair)
    :general
    (:states 'normal
     :prefix my-default-evil-leader-key
     "." 'smartparens-mode)
    :custom
    (sp-cancel-autoskip-on-backward-movement
     nil
     "We want to maintain the chomp-like behavior of electric-pair")
    (sp-autoskip-closing-pair
     'always
     "Maintain chomp-like behavior of electric-pair")
    :config
    (require 'smartparens-config) ;; load some default configurations
    (smartparens-global-mode)
    ;;(smartparens-global-strict-mode)
    ;;(show-smartparens-global-mode)
    ;; define some helper functions
    (defun my-add-newline-and-indent-braces (_opening_delimiter
                                             _actions
                                             _context)
      "adds that cool vim indent thing we always wanted, Refer to WHEN
  segment of `sp-pair' documentation on what each parameter does"
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))
    ;; update the global definitions with some indenting
    ;; I think that the nil is the flag that controls property inheritance
    ;;note: for some reason tab isn't recognised. might be yasnippet intefering.
    ;;learn to use ret for now
    (sp-pair "{" nil :post-handlers '((my-add-newline-and-indent-braces "RET")))
    (sp-pair "[" nil :post-handlers '((my-add-newline-and-indent-braces "RET")))
    (sp-pair "(" nil :post-handlers '((my-add-newline-and-indent-braces "RET"))))
#+END_SRC

* Clang Format
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package clang-format
    :straight (:host github :repo "sonatard/clang-format" :branch "master")
    :commands (clang-format-region
               clang-format-buffer
               clang-format)
    :init
    ;; IF there is a .clang-format, then use that to format before saving
    (defun my-clang-format-before-save ()
      (require 'projectile)
      (require 'clang-format)
      (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
        (add-hook 'before-save-hook 'clang-format-buffer t t)))
    :hook (c++-mode-hook . my-clang-format-before-save)
    :custom
    (clang-format-style-option "file"
                               "read from .clang-format"))
#+END_SRC

* Elisp                                                               :major:
package is known as elisp-mode but it reads as emacs-lisp

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package elisp-mode
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . rainbow-identifiers-mode)
           (emacs-lisp-mode . parinfer-mode)
           (emacs-lisp-mode . update-evil-shift-width)))
#+END_SRC

** Update Indentation Function
NOTE: We want to carefully override this
https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned
https://github.com/Fuco1/.emacs.d/blob/af82072196564fa57726bdbabf97f1d35c43b7f7/site-lisp/redef.el#L20-L94

#+BEGIN_SRC emacs-lisp :results output silent
  (defun my-updated-lisp-indent-function (indent-point state)
    "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.

   INDENT-POINT is the position at which the line being indented begins.
   Point is located at the point to indent under (for default indentation);
   STATE is the `parse-partial-sexp' state for that position.

   If the current line is in a call to a Lisp function that has a non-nil
   property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
   it specifies how to indent.  The property value can be:

   ,* `defun', meaning indent `defun'-style
   (this is also the case if there is no property and the function
   has a name that begins with \"def\", and three or more arguments);

   ,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;

   ,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.

  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
    (let ((normal-indent (current-column))
          (orig-point (point)))
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond
       ;; car of form doesn't seem to be a symbol, or is a keyword
       ((and (elt state 2)
             (or (not (looking-at "\\sw\\|\\s_"))
                 (looking-at ":")))
        (if (not (> (save-excursion (forward-line 1) (point))
                    calculate-lisp-indent-last-sexp))
            (progn (goto-char calculate-lisp-indent-last-sexp)
                   (beginning-of-line)
                   (parse-partial-sexp (point)
                                       calculate-lisp-indent-last-sexp 0 t)))
        ;; Indent under the list or under the first sexp on the same
        ;; line as calculate-lisp-indent-last-sexp.  Note that first
        ;; thing on that line has to be complete sexp since we are
        ;; inside the innermost containing sexp.
        (backward-prefix-chars)
        (current-column))
       ((and (save-excursion
               (goto-char indent-point)
               (skip-syntax-forward " ")
               (not (looking-at ":")))
             (save-excursion
               (goto-char orig-point)
               (looking-at ":")))
        (save-excursion
          (goto-char (+ 2 (elt state 1)))
          (current-column)))
       (t
        (let ((function (buffer-substring (point)
                                          (progn (forward-sexp 1) (point))))
              method)
          (setq method (or (function-get (intern-soft function)
                                         'lisp-indent-function)
                           (get (intern-soft function) 'lisp-indent-hook)))
          (cond ((or (eq method 'defun)
                     (and (null method)
                          (> (length function) 3)
                          (string-match "\\`def" function)))
                 (lisp-indent-defform state indent-point))
                ((integerp method)
                 (lisp-indent-specform method state
                                       indent-point normal-indent))
                (method
                 (funcall method indent-point state))))))))
  (advice-add 'lisp-indent-function :override 'my-updated-lisp-indent-function)
#+END_SRC

** Elmacro
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package elmacro
    :straight (:host github :repo "Silex/elmacro" :branch "master")
    :commands (elmacro-show-last-macro
               elmacro-show-last-commands
               elmacro-clear-recorded-commands)
    :config
    (elmacro-mode))
#+END_SRC

* Deft
There's an issue when re-entering the deft buffer where we're in
normal mode and not insert mode. Not sure why that is happening, since
the initial entry works as per deft-mode-hook

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package deft
    :straight (:host github :repo "jrblevin/deft" :branch "master")
    :commands (deft deft-filter deft-setup) ;; call this if no .deft folder is found
    :custom
    (deft-auto-save-interval 0.0
      "Disable autosave because of permissions issues causing massive lag")
    (deft-extensions '("org" "md")
      "Set the extensions for deft notes")
    (deft-recursive t
      "Recursively search so we can organise by folders")
    (deft-time-format "%Y%m%dT%H%M%z")
    (deft-use-filter-string-for-filename t)
    (deft-use-filename-as-title t)
    (deft-file-naming-rules '((noslash . "-")
                              (nospace . "-")
                              (case-fn . downcase)))
    :general
    (deft-mode-map
      [remap evil-quit] 'quit-window)
    (:keymaps 'deft-mode-map
     :states  '(insert normal motion)
     "C-j"    'widget-forward
     "C-k"    'widget-backward
     "M-j"    'widget-forward ;; make it more like helm, which defaults to this
     "M-k"    'widget-backward)
    (:keymaps 'deft-mode-map
     :states  'normal
     "q"      'quit-window ;; first emacsy binding in a vim state [2018-03-21 Wed]
     "p"      'deft-filter-yank
     "r r"    'deft-archive-file
     "d d"    'deft-delete-file)
    (:keymaps 'deft-mode-map
     :states  'insert
     "C-w"    'deft-filter-decrement-word
     "C-u"    'deft-filter-clear)
    :hook ((deft-open-file . org-mode))
    ;; (deft-mode . evil-insert-state))
    :init
    (evil-define-command ex-deft-forwarding-arg (filter)
      "If given an argument, pre-populates the deft filter with
      that argument"
      (interactive "<a>")
      (deft-filter filter t)
      (deft))
    (evil-ex-define-cmd "n[ote]" 'ex-deft-forwarding-arg)
    (evil-ex-define-cmd "nn" 'ex-deft-forwarding-arg)
    (evil-set-initial-state 'deft-mode 'insert)
    :config
    (when (boundp 'config-local-dropbox-folder)
      (customize-set-value 'deft-directory
                           (file-name-as-directory (concat (file-name-as-directory config-local-dropbox-folder) "notes")))))
#+END_SRC

* AES Encryption

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package aes
    :defer nil
    :straight (:host github :repo "Sauermann/emacs-aes" :branch "master")
    :commands (aes-toggle-encryption ;; this makes it auto encrypt/decrypt
               aes-remove-encryption-hook
               aes-is-encrypted
               aes-enable-auto-decryption
               aes-encrypt-buffer-or-string
               aes-decrypt-buffer-or-string)
    :hook (change-major-mode . (lambda ()
                                 (when (aes-is-encrypted)
                                   (aes-toggle-encryption))))
    :init
    (evil-define-command ex-encrypt-buffer ()
      (interactive)
      (if (aes-is-encrypted)
          (aes-decrypt-current-buffer)
        (aes-encrypt-current-buffer)))
    (evil-ex-define-cmd "X" 'ex-encrypt-buffer))
#+END_SRC

** Encrypt operator
#+BEGIN_SRC emacs-lisp :results output silent
  (evil-define-operator evil-encrypt-aes (beg end)
    "Attempt to encrypt or decrypt a range using
  `aes-encrypt-buffer-or-string' and `aes-decrypt-buffer-or-string'"
    (require 'aes)
    (let ((buf (current-buffer)))
      (with-temp-buffer
        ;; Copy region into a temporary buffer so we can encrypt/decrypt
        (insert-buffer-substring buf beg end)
        ;; Discard newline so the aes functions can check if it's
        ;; encrypted. We might want to just skip the newlines instead of
        ;; discarding them in the future, so that a-textobjects can also
        ;; work instead of just i-textobjects
        (flush-lines "^$" (point-min) (point-max))
        (if (aes-is-encrypted)
            (aes-decrypt-buffer-or-string (current-buffer))
          (aes-encrypt-buffer-or-string (current-buffer)))
        ;; Copy result back into original buffer
        (let ((temp-buf (current-buffer)))
          (with-current-buffer buf
            ;; Delete original text before copying
            (delete-region beg end)
            (insert-buffer-substring temp-buf))))))

  (general-define-key
    :keymaps 'normal
    "g X" 'evil-encrypt-aes)
#+END_SRC
* Clojure                                                             :major:

clojurescript-mode derives from clojure-mode

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package clojure-mode
    :straight (:host github :repo "clojure-emacs/clojure-mode" :branch "master")
    :commands (clojure-mode
               clojurescript-mode)
    :hook ((clojure-mode . rainbow-delimiters-mode)
           (clojure-mode . parinfer-mode)
           (clojure-mode . update-evil-shift-width))
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("edn" . clojure) org-src-lang-modes)
      (cl-pushnew '("clj" . clojure) org-src-lang-modes)
      (cl-pushnew '("cljs" . clojurescript) org-src-lang-modes)))
#+END_SRC

** CIDER

When using straight, we first encounter `cider-test.el` not found, and
then later on `package sesman not found in recipe repositories`

Sesman is not found normally by cider, so we had to manually clone it

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package sesman
    :straight (:host github :repo "vspinu/sesman" :branch "master"))
  (use-package cider
    :commands (cider-jack-in
               cider-connect)
    :straight (:host github :repo "clojure-emacs/cider" :branch "master"))
#+END_SRC

We were unable to launch a shadow-cljs nREPL directly, but we are able
to successfully connect (using =cider-connect-cljs=) into a repl we
ran using ~shadow-cljs watch app~. Do note that the socket REPL and
nREPL server runs on different ports, and neither were the ones
recommended by the cider completion engine.

We should look at customizing cider someday.

* Rust                                                                :major:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rust-mode
    :straight (:host github :repo "rust-lang/rust-mode" :branch "master")
    :mode
    ("\\.rs\\'" . rust-mode)
    :custom
    (rust-format-on-save t)
    :general
    (:states 'insert
     :keymaps 'rust-mode-map
     "RET" 'comment-indent-new-line)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("rust" . rust) org-src-lang-modes)))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp :results output silent
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   "<SPC>" nil ; was shadowing leader key bindings
   "SPC" nil ; was shadowing leader key bindings
   "C-l" 'dired-up-directory)
  (add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC

* Help+
- Emacswiki :: https://www.emacswiki.org/emacs/HelpPlus


These packages are from emacswiki, and are currently not being maintained.

They are being stored and loaded locally, since they are not on melpa or any
package manager

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package help+
    :defer 7
    :load-path "local-packages/")
  (use-package help-macro+
    :defer 7
    :load-path "local-packages/")
  (use-package help-mode+
    :defer 7
    :load-path "local-packages/")
  (use-package help-fns+
    :defer 7
    :commands (describe-keymap
               describe-buffer
               describe-command
               describe-option
               describe-key-briefly
               describe-option-of-type
               describe-copying
               find-function-on-key)
    :load-path "local-packages/")
#+END_SRC

* Markdown                                                            :major:

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package markdown-mode
    :straight (:host github :repo "jrblevin/markdown-mode" :branch "master")
    :commands (markdown-mode)
    :hook (markdown-mode . orgtbl-mode)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("md" . markdown) org-src-lang-modes)))
#+END_SRC

* Dumb Jump
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dumb-jump
    :straight (:host github :repo "jacktasia/dumb-jump" :branch "master")
    :general
    (:states 'normal
     "g d" 'dumb-jump-go))
#+END_SRC

* Helm Sources for Elisp info
#+BEGIN_SRC emacs-lisp :results output silent
  (evil-define-command find-helm-info-emacs-elisp-cl (init)
    "Helm for Emacs, Elisp, and CL-library info pages."
    (interactive "<a>")
    (helm :sources '(helm-source-info-emacs
                     helm-source-info-elisp
                     helm-source-info-cl)
          :input init))
  (evil-ex-define-cmd "elisp" 'find-helm-info-emacs-elisp-cl)
#+END_SRC

* Anki

** Markdown flavored anki editing                                 :disabled:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package anki-mode
    :disabled t
    :straight (:host github :repo "davidshepherd7/anki-mode" :branch "master")
    :commands (anki-mode-menu))
#+END_SRC

** Orgmode flavored anki editing                                  :disabled:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package anki-editor
    :disabled t
    :straight (:host github :repo "louietan/anki-editor" :branch "master"))
#+END_SRC

* JSON                                                                :major:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package json-mode
    :straight (:host github :repo "joshwnj/json-mode" :branch "master")
    :commands (json-mode)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("json" . json) org-src-lang-modes)))
#+END_SRC

* Silver Searcher (Ag)
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ag
    :straight (:host github :repo "Wilfred/ag.el" :branch "master")
    :commands ag)
#+END_SRC

** Helm Ag
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-ag
    :straight (:host github :repo "syohex/emacs-helm-ag" :branch "master")
    :commands (helm-ag
               helm-ag-this-file))
#+END_SRC

* C++

** Indentation of 4

#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default c-basic-offset 4)
#+END_SRC

** Default to K&R style

#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default c-default-style "k&r")
#+END_SRC

** Newline in comments should insert an indented comment

#+BEGIN_SRC emacs-lisp :results output silent
  (general-define-key :states 'insert
                      :keymaps 'c-mode-base-map
                      "RET" 'comment-indent-new-line)
#+END_SRC

* Disable autoformatting modes when drawing things
You can consider `artist-mode` a featurewise superset of picture-mode.

#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'artist-mode-hook '(lambda () (aggressive-fill-paragraph-mode -1)))
#+END_SRC

* Org source block handling for Artist-mode
#+BEGIN_SRC emacs-lisp :results output silent
  (with-eval-after-load 'org-src
    (cl-pushnew '("artist" . artist) org-src-lang-modes))
#+END_SRC

* Ledger                                                              :major:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ledger-mode
    :mode "\\.ledger\\'"
    :straight (:host github :repo "ledger/ledger-mode" :branch "master"
               :files (:defaults "ledger-test.el"))
    :config
      (with-eval-after-load 'org-src
        (cl-pushnew '("ledger" . ledger) org-src-lang-modes)))
#+END_SRC

** Evil-ledger
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-ledger
    :straight (:host github :repo "atheriel/evil-ledger" :branch "master")
    :after (ledger-mode))
#+END_SRC

* Hledger                                                             :major:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package hledger-mode
    :straight (:host github :repo "narendraj9/hledger-mode" :branch "master")
    :mode "\\.journal\\'")
#+END_SRC

* hl-todo
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package hl-todo
    :diminish t
    :straight (:host github :repo "tarsius/hl-todo" :branch "master")
    :commands (hl-todo-mode)
    :hook ((prog-mode  . hl-todo-mode)
           (yaml-mode  . hl-todo-mode))
    ;; :general
    ;; (:states 'normal
    ;;  :prefix my-default-evil-leader-key
    ;;  "t t" 'my-helm-swoop-hl-todo)
    ;; (:keymaps 'evil-normal-state-map
    ;;  "[ t"  'hl-todo-previous
    ;;  "] t"  'hl-todo-next)
    :custom
    (hl-todo-keyword-faces `(("TODO"   . "#b58900")
                             ("DEBUG"  . "#d33682")
                             ("BUG"    . "#dc322f")
                             ("REMOVE" . "#dc322f")
                             ("STUB"   . "#859900")
                             ("NOTE"   . "#586e75")
                             ("HACK"   . "#6c71c4")
                             ("FIXME"  . "#cb4b16"))))
    ;; :init
    ;;TODO: Make this search for regexes
    ;; (defun my-helm-swoop-hl-todo () (interactive)
    ;;        (require 'helm-swoop)
    ;;        (helm-swoop :$query hl-todo-regexp :$multiline 4)))
    ;; Stolen from https://github.com/emacs-helm/helm/wiki/Developing. Convenient!
    ;; Not used because we don't incrementally search for todos
    ;; (defun my-helm-hl-todo-items ()
    ;;   "Show `hl-todo'-keyword items in buffer."
    ;;   (interactive)
    ;;   (hl-todo--setup)
    ;;   (helm :sources (helm-build-in-buffer-source "hl-todo items"
    ;;                    :data (current-buffer)
    ;;                    :candidate-transformer (lambda (candidates)
    ;;                                             (cl-loop for c in candidates
    ;;                                                      when (string-match hl-todo--regexp c)
    ;;                                                      collect c))
    ;;                    :get-line #'buffer-substring)
    ;;         :buffer "*helm hl-todo*"))
#+END_SRC

* Abbrev
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default abbrev-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (setq abbrev-file-name (at-user-init-dir "abbrevs.el"))
#+END_SRC

** Silently
#+BEGIN_SRC emacs-lisp :results output silent
  (setq save-abbrevs 'silently)
#+END_SRC

* Darkroom

Basically writers-mode

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package darkroom
    :straight (:host github :repo "joaotavora/darkroom" :branch "master")
    :commands (darkroom-mode darkroom-tentative-mode)
    :init
    (evil-ex-define-cmd "writer" 'darkroom-tentative-mode))
#+END_SRC

* Helpful
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helpful
    :straight (:host github :repo "Wilfred/helpful" :branch "master")
    :general
    ("C-h k"   'helpful-key
     "C-h f"   'helpful-callable
     "C-h v"   'helpful-variable
     "C-h RET" 'helpful-at-point))
#+END_SRC

* Elisp demos

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package elisp-demos
    :after (helpful)
    :straight (:host github :repo "xuchunyang/elisp-demos" :branch "master"
               :files (:defaults "elisp-demos.org"))
    :config
    (with-eval-after-load 'helpful
      (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
    (advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1))
#+END_SRC

* Make shell open in same window
- Related Spacemacs Issue ::
  https://github.com/syl20bnr/spacemacs/issues/6820


#+BEGIN_SRC emacs-lisp :results output silent
  (add-to-list 'display-buffer-alist '("\\*shell\\*" . (display-buffer-same-window . nil)))
#+END_SRC

* Make cursor always move to end when entering insert mode in comint modes
#+BEGIN_SRC emacs-lisp :results output silent
  (customize-set-value 'comint-scroll-to-bottom-on-input t)
#+END_SRC

* Make shell mode update working directory
- Stackoverflow :: [[https://emacs.stackexchange.com/questions/5589/automatically-update-default-directory-when-pwd-changes-in-shell-mode-and-term-m][link]]


#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'shell-mode-hook (lambda ()
                               (shell-dirtrack-mode 0)
                               (set-variable 'dirtrack-list '("^.*[^ ]+:\\(.*\\)>" 1 nil))
                               (dirtrack-mode 1)))
#+END_SRC

* Which Key
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package which-key
    :straight (:host github :repo "justbur/emacs-which-key" :branch "master")
    :defer 10
    :config
    (which-key-mode))
#+END_SRC

* Groovy mode                                                         :major:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package groovy-mode
    :straight (:host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes" :branch "master")
    :mode (("\\.groovy\\'" . groovy-mode)
           ("\\Jenkinsfile\\'" . groovy-mode))
    :init
    (with-eval-after-load 'org-src
        (cl-pushnew '("groovy" . groovy) org-src-lang-modes)))

#+END_SRC

* Hy Mode                                                             :major:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package hy-mode
    :straight (:host github :repo "hylang/hy-mode" :branch "master")
    :mode "\\.hy\\'"
    :general
    (hy-mode-map
     :states 'insert
     "RET" 'comment-indent-new-line)
    :hook ((hy-mode . rainbow-delimiters-mode)
           (hy-mode . parinfer-mode)
           (hy-mode . update-evil-shift-width))
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("hy" . hy) org-src-lang-modes)))
#+END_SRC

* vlf-mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package vlf
    :straight (:host github :repo "m00natic/vlfi" :branch "master")
    :config (require 'vlf-setup))
#+END_SRC

* Yankpad
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yankpad
    :straight (:host github :repo "Kungsgeten/yankpad" :branch "master")
    :commands (yankpad-expand
               yankpad-edit
               yankpad-reload)
    :init
    (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
    (evil-define-command ex-yankpad (cmd)
      (interactive "<a>")
      (cond
       ((string= cmd "reload") (yankpad-reload))
       (t (yankpad-edit))))
    (evil-ex-define-cmd "snippet[s]" 'ex-yankpad)
    :custom
    (yankpad-file (at-user-init-dir "snippets.org")))
#+END_SRC

* Smart tab
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package smart-tab
    :straight (:host github :repo "genehack/smart-tab" :branch "master")
    :custom
    (smart-tab-using-hippie-expand t)
    :config
    (global-smart-tab-mode))
#+END_SRC
