[[https://necromuralist.github.io/posts/org-babel-cheat-sheet/][Org Babel Cheatsheet]]
[[https://org-babel.readthedocs.io/en/latest/eval/][Org Babel Reference Card]]
[[https://github.com/dfeich/org-babel-examples][Org Babel Examples]]

* On Hydras                                                       :hydra:doc:
[[https://github.com/abo-abo/hydra#awesome-docstring][Github source]]

This can be a simple string used to build the final hydra hint.
However, if you start it with a newline, the key-highlighting and
Ruby-style string interpolation becomes enabled.

To highlight a key, just wrap it in underscores (=_=). Note that the key
must belong to one of the heads. The key will be highlighted with the
color that is appropriate to the behavior of the key, i.e. if the key
will make the hydra exit, the color will be blue.

To insert an empty character, use =^=. The only use of this is to have
your code aligned as nicely as the result.

To insert a dynamic Elisp variable, use =%`= followed by the variable.
Each time the variable changes due to a head, the docstring will be
updated. format-style width specifiers can be used.

To insert a dynamic Elisp expression, use e.g. =%(length
(dired-get-marked-files))=. If a head will change the amount of marked
files, for example, it will be appropriately updated.

If the result of the Elisp expression is a string and you don't want
to quote it, use this form: =%s(shell-command-to-string "du -hs")=.

* TODO Figure out Edebug and tracebacks
- [[http://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html][Introduction part 1]]
- [[http://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html][Introduction part 2]]

** debugger-mode-map
0 .. 9                           digit-argument

TAB                              forward-button
RET                              debug-help-follow
ESC                              Prefix Command
SPC                              next-line
-                                negative-argument
R                                debugger-record-expression
b                                debugger-frame
c                                debugger-continue
d                                debugger-step-through
e                                debugger-eval-expression
h                                describe-mode
j                                debugger-jump
l                                debugger-list-functions
q                                top-level
r                                debugger-return-value
u                                debugger-frame-clear
v                                debugger-toggle-locals
<backtab>                        backward-button
<mouse-2>                        push-button
<normal-state>                   Prefix Command
<remap>                          Prefix Command

<normal-state> SPC              next-line
<normal-state> E                debugger-eval-expression
<normal-state> J                debugger-jump
<normal-state> L                debugger-toggle-locals
<normal-state> R                debugger-record-expression
<normal-state> Z                Prefix Command
<normal-state> c                debugger-continue
<normal-state> d                debugger-step-through
<normal-state> g                Prefix Command
<normal-state> p                debugger-toggle-locals
<normal-state> q                top-level
<normal-state> r                debugger-return-value
<normal-state> u                debugger-frame-clear
<normal-state> x                debugger-eval-expression
<normal-state> <S-tab>          backward-button
<normal-state> <return>         debug-help-follow
<normal-state> <tab>            forward-button

C-M-i                           backward-button

<normal-state> Z Q              evil-quit
<normal-state> Z Z              top-level

<normal-state> g b              debugger-frame
<normal-state> g l              debugger-list-functions

* Define useful constants
#+begin_src emacs-lisp :results output silent
  (defconst my-inbox-org-file (if (boundp 'config-local-syncthing-folder)
                                  (concat config-local-syncthing-folder "/notes/inbox.org")
                                (progn
                                  (error "Unable to find the syncthing folder!")
                                  nil)))
#+end_src

#+begin_src emacs-lisp :results output silent
  (when (boundp 'config-local-syncthing-folder)
    (defun find-user-syncthing-folder ()
      (interactive)
      (dired config-local-syncthing-folder)))
#+end_src

* Quality of Life
** Frame Transparency
#+begin_src emacs-lisp :results output silent
  ;;;###autoload
  (defun my-set-frame-transparency (value)
    "Set the transparency of the frame window to VALUE.
  0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

** Highlight line
#+begin_src emacs-lisp :results output silent
(global-hl-line-mode)
#+end_src

** Default input method
We're sticking to Japanese for now
#+begin_src emacs-lisp :results output silent
  (setq default-input-method "japanese")
#+end_src

** Disable GUI Elements
#+begin_src emacs-lisp :results output silent
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (window-divider-mode -1)
#+end_src

** Timestamp
Emulate the best feature of notepad

#+begin_src emacs-lisp :results output silent
  (defun iso-8601-timestamp ()
    (concat (format-time-string "%Y-%m-%d")
            "T"
            (format-time-string "%T")
            (format-time-string "%z")))
  (general-define-key
   :states '(normal insert)
    "<f5>" '(lambda () (interactive)
              (if (eq major-mode 'org-mode)
                  (org-time-stamp-inactive '(16))
                (insert (iso-8601-timestamp)))))
#+end_src

** Do not truncate lines
#+begin_src emacs-lisp :results output silent
  (setq-default truncate-lines t)
#+end_src

** Open a startup file as initial buffer
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'initial-buffer-choice user-frontpage-file)
#+end_src

** Configure scratch buffer message
#+begin_src emacs-lisp :results output silent
  (setq initial-scratch-message nil)
#+end_src

** Configure scratch buffer mode
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'initial-major-mode 'org-mode)
#+end_src

** Disable startup screen
#+begin_src emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+end_src

** Change "yes or no" to "y or n"
#+begin_src emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Require newlines at the end of all files
#+begin_src emacs-lisp :results output silent
  (setq-default require-final-newline t)
#+end_src

** Disable alert sounds
#+begin_src emacs-lisp :results output silent
  (setq ring-bell-function 'ignore)
#+end_src

** Automatically refresh buffer when underlying file is changed externally
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'global-auto-revert-non-file-buffers nil)
  (global-auto-revert-mode)
#+end_src

** Make window subprocess communications faster
#+begin_src emacs-lisp :results output silent
  (setq w32-pipe-read-delay 0)
#+end_src

** Set default tab width
#+begin_src emacs-lisp :results output silent
  (setq-default tab-width 4)
#+end_src

** Make <TAB> always indent
#+begin_src emacs-lisp :results output silent
  (setq tab-always-indent 'complete)
#+end_src

** Never indent with a TAB character
#+begin_src emacs-lisp :results output silent
  (setq-default indent-tabs-mode nil)
#+end_src

** Strip Whitespace on save
#+begin_src emacs-lisp :results output silent
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Bind whitespace-mode
#+begin_src emacs-lisp :results output silent
  (general-define-key
   :states 'normal
   :prefix my-default-evil-leader-key
    "," 'whitespace-mode)
#+end_src

** After creating a new frame, immediately focus on that frame.
#+begin_src emacs-lisp :results output silent
  (add-hook 'after-make-frame-functions 'select-frame)
#+end_src

** Sentences should end after a single space, not two
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'sentence-end-double-space nil)
#+end_src

** Underscores should be considered as part of a word
#+begin_src emacs-lisp :results output silent
  (add-hook 'after-change-major-mode-hook '(lambda () (modify-syntax-entry ?_ "w")))
#+end_src

** Ensure that files being edited are recoverable
#+begin_src emacs-lisp :results output silent
  (setq delete-old-versions t
        backup-by-copying t
        version-control t
        kept-new-versions 20
        kept-old-versions 5
        vc-make-backup-files t)
  (setq savehist-save-minibuffer-history 1
        savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq history-length t
        history-delete-duplicates t)
  (savehist-mode 1)
#+end_src

** Stretch caret to cover full width of character
http://pragmaticemacs.com/emacs/adaptive-cursor-width/
#+begin_src emacs-lisp :results output silent
  (setq x-stretch-cursor t)
#+end_src

** Display line numbers when editing code
#+begin_src emacs-lisp :results output silent
  (when (>= emacs-major-version 26)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+end_src

** Show matching parens
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'show-paren-when-point-inside-paren t)
  (customize-set-variable 'show-paren-when-point-in-periphery t)
  (add-hook 'prog-mode-hook 'show-paren-mode)
#+end_src

** Scroll like Vim
#+begin_src emacs-lisp :results output silent
  (setq scroll-step 1
        scroll-margin 1
        scroll-conservatively 9999)
#+end_src

** Activate hs-minor-mode on prog mode
#+begin_src emacs-lisp :results output silent
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

** Eval sexp and replace with results
Stolen from https://github.com/bbatsov/crux

#+begin_src emacs-lisp :results output silent
  ;;;###autoload
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (let ((value (eval (elisp--preceding-sexp))))
      (backward-kill-sexp)
      (insert (format "%S" value))))
#+end_src

** Completion
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'completion-ignore-case t)
  (customize-set-variable 'read-file-name-completion-ignore-case t)
  (customize-set-variable 'read-buffer-completion-ignore-case t)
#+end_src

** Copy file name to keyboard
#+begin_src emacs-lisp :results output silent
  (defun my-kill-path-to-keyboard ()
    "https://stackoverflow.com/questions/2416655/file-path-to-clipboard-in-emacs"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename))))
#+end_src

#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "ypath" 'my-kill-path-to-keyboard)
#+end_src

** Tags table defaults
#+begin_src emacs-lisp :results output silent
  (setq-default tags-add-tables nil)
#+end_src

** COMMENT If inside {}, [], or (), newline and indent
#+begin_src emacs-lisp :results output silent
  (defun config-block-insert-newline (list)
    "If the point is immediately bounded by {}, (), or [], indent it
    properly, given an alist of (BEFORE . AFTER) characters.
  Example, if the point is within {} like so {|}:
  When newline is pressed, turn it into {
      |
  }
  instead.
  "
    (interactive)
    (loop for (begin . end) in list
          when (and (string= begin (preceding-char))
                    (string= end (following-char)))
            do
            (newline)
            (indent-according-to-mode)
            (forward-line -1)
            (indent-according-to-mode)
            (return-from config-block-insert-newline)))
#+end_src


** Set commands
#+begin_src emacs-lisp :results output silent
  (evil-define-command config-ex-set-arg (cmd)
    (interactive "<a>")
    (cond
     ((string= cmd "wrap") (visual-line-mode 1))
     ((string= cmd "nowrap") (visual-line-mode -1))))
  (evil-ex-define-cmd "set" 'config-ex-set-arg)
#+end_src

** Electric Indent
#+begin_src emacs-lisp :results output silent
  (electric-indent-mode)
#+end_src

** Buffer menu mode map config
#+begin_src emacs-lisp :results output silent
  (general-define-key
   :keymaps 'Buffer-menu-mode-map
   :states '(normal motion)
   "C-d" 'evil-scroll-down)
#+end_src
* Apropos Configuration
#+begin_src emacs-lisp :results output silent
  (use-package apropos
    :ensure nil
    :custom
    (apropos-do-all t)
    :init
    (evil-define-command my-apropos (pattern)
      (interactive "<a>")
      (apropos pattern))
    (evil-ex-define-cmd "h[elp]" 'my-apropos))
#+end_src

* Which Key
#+begin_src emacs-lisp :results output silent
  (use-package which-key
    :straight (:host github :repo "justbur/emacs-which-key")
    :defer 10
    :config
    (which-key-mode))
#+end_src

* Hercules
:PROPERTIES:
:DEPENDENCIES: which-key
:END:

Using functions to enter and exit is a fair bit clunky, so I'm
re-evaluating the need for this

#+begin_src emacs-lisp :results output silent
  (use-package hercules
    :straight (:host gitlab :repo "jjzmajic/hercules.el")
    :commands (hercules-def))
#+end_src

* Packaging
#+begin_src emacs-lisp :results output silent
  (use-package auto-package-update
    :straight (:host github :repo "rranelli/auto-package-update.el")
    :commands (auto-package-update-now
               auto-package-update-at-time
               auto-package-update-maybe)
    :custom
    (auto-package-update-delete-old-versions t
                                             "We already version them on
                                             git")
    (auto-package-update-prompt-before-update t
                                              "NO SURPRISES")
    (auto-package-update-interval 14
                                  "update once every 2 weeks (the count
                                  is in days)"))
#+end_src

* Evil
** Alignment
#+begin_src emacs-lisp :results output silent
  (use-package evil-lion
    :straight (:host github :repo "edkolev/evil-lion")
    :after (evil)
    :general
    (:keymaps '(normal visual)
     "gl"     'evil-lion-left
     "gL"     'evil-lion-right))
#+end_src

** Increment and Decrement
Disabled because I'm slowly turning into an Emacs citizen.
#+begin_src emacs-lisp :results output silent
  (use-package evil-numbers
    :disabled t
    :straight (:host github :repo "cofi/evil-numbers")
    :general
    (:keymaps 'normal
     "C-a"  'evil-numbers/inc-at-pt
     "C-x"  'evil-numbers/dec-at-pt))
#+end_src

** Goggles
#+begin_src emacs-lisp :results output silent
  (use-package evil-goggles
    :straight (:host github :repo "edkolev/evil-goggles")
    :commands (evil-goggles-mode)
    :init
    (evil-ex-define-cmd "gog[gles]" 'evil-goggles-mode)
    :config
    (evil-goggles-use-diff-faces))
#+end_src

** Evil Expat
Adds the following ex commands:

| :reverse           | reverse visually selected lines                                |
| :remove            | remove current file and its buffer                             |
| :rename NEW-PATH   | rename or move current file and its buffer                     |
| :colorscheme THEME | change emacs color theme                                       |
| :diff-orig         | get a diff of unsaved changes, like vim's common :DiffOrig     |
| :gdiff             | BRANCH git-diff current file, requires magit and vdiff-magit   |
| :gblame            | git-blame current file, requires magit                         |
| :gremove           | git remove current file, requires magit                        |
| :tyank             | copy range into tmux paste buffer, requires running under tmux |
| :tput              | paste from tmux paste nuffer, requires running under tmux      |

#+begin_src emacs-lisp :results output silent
  (use-package evil-expat
    :straight (:host github :repo "edkolev/evil-expat"))
#+end_src

** Matchit
#+begin_src emacs-lisp :results output silent
  (use-package evil-matchit
    :straight (:host github :repo "redguardtoo/evil-matchit")
    :after evil
    :config
    (global-evil-matchit-mode))
#+end_src

** Visualstar
Allows for * and # commands. which originally only worked on WORDs,
to work on a visual selection too

#+begin_src emacs-lisp :results output silent
  (use-package evil-visualstar
    :straight (:host github :repo "bling/evil-visualstar")
    :general
    (:keymaps 'visual
     "*" 'evil-visualstar/begin-search-forward
     "#" 'evil-visualstar/begin-search-backward))
#+end_src

** Fringe marks
Disabled because it kept raising a warning during init about markerp
#+begin_src emacs-lisp :results output silent
  (use-package evil-fringe-mark
    :straight (:host github :repo "Andrew-William-Smith/evil-fringe-mark")
    :disabled t
    :custom
    (evil-fringe-mark-show-special t)
    :hook
    (prog-mode . evil-fringe-mark-mode))
#+end_src

** Visual marks
#+begin_src emacs-lisp :results output silent
  (use-package evil-visual-mark-mode
    :straight (:host github :repo "roman/evil-visual-mark-mode")
    :commands evil-visual-mark-mode)
#+end_src

** Input method Convenience toggle
https://www.emacswiki.org/emacs/Evil#toc24

#+begin_src emacs-lisp :results output silent
  (defun my-evil-toggle-input-method ()
    (interactive)
    (let ((is-insert-state (string= evil-state "insert")))
      (cond
       ((and (not current-input-method) (not is-insert-state)) (evil-insert-state))
       ((and current-input-method is-insert-state) (evil-normal-state))
       (t nil))
      (toggle-input-method)))
#+end_src

#+begin_src emacs-lisp :results output silent
  (general-define-key
   :keymaps 'global
   "C-\\" 'my-evil-toggle-input-method)
#+end_src

** Interactive Codes
Look at =evil-interactive-alist=, which seems to contain all the
interactive codes provided.

** Replace with Register
#+begin_src emacs-lisp :results output silent
  (use-package evil-replace-with-register
    :straight (:host github :repo "Dewdrops/evil-ReplaceWithRegister")
    :after evil
    :config
    (evil-replace-with-register-install))
#+end_src

** Text Objects
*** Latex Textobjects
I appear to have stolen this from somewhere, probably because the original
package isn't being maintained or something

| Key | Description                          |
|-----+--------------------------------------|
| =$= | Inline math ($$)                     |
| =\= | Display math (=\[ \]=)               |
| =m= | TeX macros (\foo{})                  |
| =E= | Tex environments (\begin{}...\end{}) |

#+begin_src emacs-lisp :results output silent
  (use-package evil-latex-textobjects
    :load-path "local-packages/"
    :commands (turn-on-evil-latex-textobjects-mode)
    :general
    (:keymaps 'evil-latex-textobjects-inner-map
     "e" nil
     "E" 'evil-latex-textobjects-inner-env)
    (:keymaps 'evil-latex-textobjects-outer-map
     "e" nil
     "E" 'evil-latex-textobjects-an-env)
    :hook (LaTeX-mode . turn-on-evil-latex-textobjects-mode))
#+end_src

*** Surround text objects
#+begin_src emacs-lisp :results output silent
  (use-package evil-surround
    :straight (:host github :repo "emacs-evil/evil-surround")
    :after (evil)
    :config
    (global-evil-surround-mode))
#+end_src

*** Argument text objects
#+begin_src emacs-lisp :results output silent
  (use-package evil-args
    :straight (:host github :repo "wcsmith/evil-args")
    :after (evil)
    :general
    (evil-inner-text-objects-map
     "a" 'evil-inner-arg)
    (evil-outer-text-objects-map
     "a" 'evil-outer-arg)
    :config
    ;; these variables don't exist until evil-arg loads
    (push "<" evil-args-openers)
    (push ">" evil-args-closers))
#+end_src

*** Comment using text objects
#+begin_src emacs-lisp :results output silent
  (use-package evil-commentary
    :straight (:host github :repo "linktohack/evil-commentary")
    :after (evil)
    :config
    (evil-commentary-mode))
#+end_src

*** Comment Text Objects
#+begin_src emacs-lisp :results output silent
  (use-package evil-nerd-commenter
    :straight (:host github :repo "redguardtoo/evil-nerd-commenter")
    :after (evil)
    :general
    (evil-inner-text-objects-map
     "c" 'evilnc-inner-comment)
    (evil-outer-text-objects-map
     "c" 'evilnc-outer-commenter))
#+end_src

(Compatibility with evil-matchit)
#+begin_src emacs-lisp :results output silent
  (with-eval-after-load 'evil-matchit
    (with-eval-after-load 'evil-nerd-commenter
      (evilmi-load-plugin-rules '(mhtml-mode) '(template simple html))))
#+end_src

*** Syntax Text Objects
Bound to "h"

#+begin_src emacs-lisp :results output silent
  (use-package evil-textobj-syntax
    :straight (:host github :repo "laishulu/evil-textobj-syntax")
    :after evil)
#+end_src

*** Indent text objects
#+begin_src emacs-lisp :results output silent
  (use-package evil-indent-plus
    :straight (:host github :repo "TheBB/evil-indent-plus")
    :general
    (evil-inner-text-objects-map
     "i" 'evil-indent-plus-i-indent
     "I" 'evil-indent-plus-a-indent)
    (evil-outer-text-objects-map
     "i" 'evil-indent-plus-i-indent-up
     "I" 'evil-indent-plus-a-indent-up))
#+end_src

*** Line Text Objects
#+begin_src emacs-lisp :results output silent
  (use-package evil-textobj-line
    :straight (:host github :repo "syohex/evil-textobj-line")
    :after evil)
#+end_src

*** Targets
This is an expensive package to load, and I wonder why.

#+begin_src emacs-lisp :results output silent
  (use-package targets
    :disabled t ;; See what we're missing if we don't use this for now
    :straight (:host github :repo "noctuid/targets.el")
    :general
    (evil-inner-text-objects-map
     "b" 'targets-inner-paren
     "B" 'targets-inner-curly)
    (evil-outer-text-objects-map
     "b" 'targets-a-paren
     "B" 'targets-a-curly)
    :config
    (targets-setup t
                   :last-key nil
                   :next-key nil
                   :inside-key nil
                   :around-key nil
                   :remote-key nil))
#+end_src

*** Evil-cleverparens
#+begin_src emacs-lisp :results output silent
  (use-package evil-cleverparens
    :straight (:host github :repo "luxbock/evil-cleverparens")
    :general
    (evil-inner-text-objects-map
     "f" 'evil-cp-inner-form)
    (evil-outer-text-objects-map
     "f" 'evil-cp-a-form)
    (evil-cleverparens-mode-map
     :states '(visual normal)
     ">" nil
     "<" nil
     "{" nil
     "}" nil))
#+end_src

*** Sentences
#+begin_src emacs-lisp :results output silent
    (use-package sentence-navigation
      :straight (:host github :repo "noctuid/emacs-sentence-navigation")
      :general
      (:states 'motion
       ")" 'sentence-nav-evil-forward
       "(" 'sentence-nav-evil-backward
       "g)" 'sentence-nav-evil-forward-end
       "g(" 'sentence-nav-evil-backward-end)
      (evil-outer-text-objects-map
       "s" 'sentence-nav-evil-a-sentence)
      (evil-inner-text-objects-map
       "s" 'sentence-nav-evil-inner-sentence))
#+end_src

*** [K]olumns
#+begin_src emacs-lisp :results output silent
  (use-package evil-textobj-column
    :straight (:host github :repo "noctuid/evil-textobj-column")
    :general
    (evil-outer-text-objects-map
     "k" 'evil-textobj-column-word
     "K" 'evil-textobj-column-WORD))
#+end_src

* Helm
** Describe Modes
#+begin_src emacs-lisp :results output silent
  (use-package helm-describe-modes
    :disabled t
    :straight (:host github
               :repo "emacs-helm/helm-describe-modes")
    :general
    ("C-h m" 'helm-describe-modes))
#+end_src

** Describe Bindings
Use counsel instead
#+begin_src emacs-lisp :results output silent
  (use-package helm-descbinds
    :disabled t
    :straight (:host github
               :repo "emacs-helm/helm-descbinds")
    :general
    ("C-h b" 'helm-descbinds))
#+end_src

#+begin_src emacs-lisp :results output silent
  (general-define-key "C-h b" 'counsel-descbinds)
#+end_src

* Org Mode
** Evil Org Bindings
Full keybindings:
- https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org


Important bindings:

| <M-S-return> | Insert checkbox item |

Interesting Text Objects:

| key     | function                          | examples                         |
|---------+-----------------------------------+----------------------------------|
| ae / ie | evil-org-an/inner-object          | link, markup, table cell         |
| aE / iE | evil-org-an/inner-element         | paragraph, code block, table row |
| ar / ir | evil-org-an/inner-greater-element | item list, table                 |
| aR / iR | evil-org-an/inner-subtree         | subtree starting with a header   |


#+begin_src emacs-lisp :results output silent
  (use-package evil-org
    :straight (:host github :repo "Somelauw/evil-org-mode")
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode))
    :custom
    (evil-org-retain-visual-state-on-shift
     t "Let us chain < and > calls")
    (evil-org-use-additional-insert
     t "Add things like M-j to insert")
    (evil-org-special-o/O
     '(table-row) "Do not let o/O affect list items, throws me off")
    (org-special-ctrl-a/e
     t "Pretend leading stars on headlines don't exist when using A/I")
    :general
    (evil-org-mode-map
     :states 'normal
     "g f" 'evil-org-open-links)
    :init
    (with-eval-after-load 'org-agenda
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)
      (add-hook 'org-agenda-mode-hook 'evil-org-mode))
    :config
    (evil-org-set-key-theme '(textobjects
                              insert
                              navigation
                              additional
                              shift
                              return
                              operators
                              ;; todo
                              ;; heading
                              calendar)))
#+end_src

** Org Capture Bindings
#+begin_src emacs-lisp :results output silent
  (use-package org-capture
    :ensure nil ;; because org-capture is from org
    :after (org)
    :commands (org-capture
               org-capture-templates)
    :general
    (:states 'motion
     ;; In evil it's jump to column number, which isn't that useful tbh
     "|" '(lambda () (interactive)
              (require 'org-capture)
              (if (featurep 'counsel-projectile)
                  (counsel-projectile-org-capture)
                (counsel-org-capture))))
     ;; "c j" '((lambda () (interactive) (org-capture nil "j"))
     ;;         :which-key "Capture journal entry")
     ;; "c d" '((lambda () (interactive) (org-capture nil "d"))
     ;;         :which-key "Capture daydream entry"))
    (:prefix my-default-evil-leader-key
     :keymaps 'org-capture-mode-map
     :states 'normal
     "r r" 'org-capture-refile)
    (org-capture-mode-map
     [remap evil-save-and-close]          'org-capture-finalize
     [remap evil-save-modified-and-close] 'org-capture-finalize
     [remap evil-quit]                    'org-capture-kill)
    ;; :init
    ;; (defun my-capture-daydream ()
    ;;   ""
    ;;   (interactive)
    ;;   (org-capture nil "d")
    ;; (evil-ex-define-cmd "todo" 'my-capture-daydream)
    :hook (org-capture-mode . evil-insert-state)
    :config
    (when (boundp 'config-local-syncthing-folder)
      (add-to-list 'org-capture-templates
                   `("i" "Standard Inbox" entry
                     (file ,my-inbox-org-file)
                     "* TODO %? \nOPENED: %U"))))
    ;; when inserting a heading immediately go into insert mode
    ;; (when (boundp 'my-journal-org-file)
    ;;   (add-to-list 'org-capture-templates
    ;;                `("j" "Journal Entry" entry
    ;;                  (file ,my-journal-org-file)
    ;;                  "* %U\n%?")
    ;; (when (boundp 'my-daydream-org-file)
    ;;   (add-to-list 'org-capture-templates
    ;;                `("d" "Daydream Entry" entry
    ;;                  (file ,my-daydream-org-file)
    ;;                  "* %? \n %U"))
#+end_src

** Org Agenda
For some reason we can't do this in the scratch buffer
#+begin_src emacs-lisp :results output silent
  (use-package org-agenda
    :ensure nil
    :commands (org-todo-list
               org-agenda-file-to-front)
    :config
    (with-eval-after-load 'deft
      (customize-set-variable 'org-agenda-files
                          (add-to-list 'org-agenda-files
                                        deft-directory))))
#+end_src

** Org Src
Don't bind to C-c C-c because it might impact the src block's
language's mappings.

#+begin_src emacs-lisp :results output silent
  (use-package org-src
    :ensure nil
    :disabled t
    :general
    (org-src-mode-map
     "C-c C-c" 'org-edit-src-exit))
#+end_src

** Org Download
#+begin_src emacs-lisp :results output silent
  (use-package org-download
    :straight (:host github :repo "abo-abo/org-download")
    :hook ((dired-mode . org-download-enable)
           (org-mode . org-download-enable)))
#+end_src

** Worf
[[http://pragmaticemacs.com/emacs/insert-internal-org-mode-links-the-ivy-way/][Source]].
#+begin_src emacs-lisp :results output silent
  (use-package worf
    :straight (:host github :repo "abo-abo/worf")
    :commands worf--goto-candidates
    :general
    (:keymaps 'org-mode-map
     :states '(normal visual)
     :prefix my-default-evil-leader-key
     "o l" 'my-worf-insert-internal-link
     "l l" 'org-toggle-link-display)
    :init
    (defun my--worf-insert-internal-link-action (x)
      (save-excursion
        (goto-char (cdr x))
        (call-interactively 'org-store-link))
      (org-insert-last-stored-link 1)
      (delete-backward-char 1))
    (defun my-worf-insert-internal-link ()
      (interactive)
      ;; TODO: Why isn't this working?
      (when (org-region-active-p)
        (delete-active-region))
      (let ((cands (worf--goto-candidates)))
        (ivy-read "Heading: " cands
                  :action 'my--worf-insert-internal-link-action))))
#+end_src

** Org pomodoro
:LOGBOOK:
CLOCK: [2019-05-06 Mon 14:02]--[2019-05-06 Mon 14:27] =>  0:25
:END:

=mode-line-misc-info= is where the pomodoro is placed.

It is behind =mode-line-modes= and if we want the pomodoro to be
infront, we need to alter it there

I think we should put =mode-line-format= just behind =evil-mode-line-tag=,
or (vc-mode)

We can use the following to insert =org-pomodoro-mode-line= at
whereever we like on the modeline.

The string seems to be inserted into the modeline once, and then set
to an empty string when not in use (it so appears anyway).

We can override the insertion checks everytime =org-pomodoro-start= is
called, and it should work anywhere.

# #+begin_src emacs-lisp :eval no-export
#   (-insert-at
#     (-find-index (lambda (sym)
#                    (eq sym 'evil-mode-line-tag))
#                  mode-line-format)
#     'org-pomodoro-mode-line mode-line-format)
# #+end_src

#+begin_src emacs-lisp :results output silent
  (use-package org-pomodoro
    :straight (:host github :repo "lolownia/org-pomodoro"
               :files (:defaults ("resources/" "resources/*")))
    :commands (org-pomodoro)
    :custom
    (org-pomodoro-manual-break t)
    ;; guild wars 2 has some excellent notification sounds
    ;; For some reason they need an absolute path
    (org-pomodoro-overtime-sound
     (expand-file-name (locate-user-emacs-file "notification1.wav")))
    (org-pomodoro-short-break-sound
     (expand-file-name (locate-user-emacs-file "notification2.wav")))
    (org-pomodoro-long-break-sound
     (expand-file-name (locate-user-emacs-file "notification3.wav")))
    (org-pomodoro-finished-sound nil)
    :init
    (evil-define-command my-pomodoro-start (&optional arg)
      "Starts a pomodoro with the current headline, or the last pomodoro
  if ! is provided."
      (interactive "<!>")
      (let ((prev_clock (when arg '(16))))
        (org-pomodoro prev_clock)))
    (evil-ex-define-cmd "doing" 'org-clock-goto)
    (evil-ex-define-cmd "do" 'my-pomodoro-start)
    (evil-ex-define-cmd "done"
                        #'(lambda () (interactive)
                            (require 'org-pomodoro)
                            (cond
                             ((equal org-pomodoro-state :overtime)
                              (org-pomodoro))
                             ((org-pomodoro-active-p)
                              (org-pomodoro-kill))))))
  ;; :config
  ;;   (advice-add 'org-pomodoro-start
  ;;               :after
  ;;               #'(lambda (&rest _)
  ;;                   "Attempt to make the modeline come first, instead of
  ;; behind the minor modes"
  ;;                   (when (and global-mode-string
  ;;                              (memq 'org-pomodoro-mode-line
  ;;                                    global-mode-string))
  ;;                     (delq 'org-pomodoro-mode-line global-mode-string)
  ;;                     (setq global-mode-string
  ;;                           (append '(org-pomodoro-mode-line)
  ;;                                   global-mode-string)))))
#+end_src


Note that =customize-set-variable= is like =setq-default=.

#+begin_src emacs-lisp :results output silent
  (customize-set-variable
   'mode-line-format
   (list "%e" mode-line-front-space mode-line-mule-info
         mode-line-client mode-line-modified mode-line-auto-compile
         mode-line-remote mode-line-frame-identification
         mode-line-buffer-identification " " mode-line-position
         evil-mode-line-tag mode-line-misc-info '(vc-mode vc-mode) " "
         mode-line-modes mode-line-end-spaces))
#+end_src

** Org wiki
Currently disabled while we look at other, more maintained projects
#+begin_src emacs-lisp :results output silent
  (use-package org-wiki
    :straight (:host github :repo "caiorss/org-wiki")
    :disabled t
    :commands (org-wiki-index
               org-wiki-help))
#+end_src

** Org brain
#+Begin_src emacs-lisp :results output silent
  (use-package org-brain
    :straight (:host github :repo "Kungsgeten/org-brain")
    :commands (org-brain-visualize
               counsel-brain
               org-brain-switch-brain)
    :custom
    (org-brain-path (concat (if (boundp 'config-local-syncthing-folder)
                                config-local-syncthing-folder
                              "~") "/wiki"))
    (org-brain-show-resources
     nil
     "https://github.com/Kungsgeten/org-brain/pull/203 I don't really
     use attachments either way so this does not affect me")
    ;; because we don't enter visualize-mode in normal state
    :hook ((org-brain-visualize-text . evil-ex-nohighlight))
    :general
    (org-brain-visualize-mode-map
     "SPC"        nil
     "S-SPC"      nil
     "\C-w"      'evil-window-map
     ":"         'evil-ex
     "/"         'evil-ex-search-forward
     "?"         'evil-ex-search-backward
     "h"         'org-brain-add-child-headline ;; it's recommended to use this instead
     "\C-c \C-w" 'org-brain-refile)
    :init
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
      (evil-define-command my-org-brain-config (args)
        (interactive "<a>")
        (cond
         ;;TODO: implement additional ex command line things
          (t (call-interactively 'org-brain-visualize))))
      (evil-ex-define-cmd "wiki" 'my-org-brain-config))
    :config
    ;; NOTE: We do this because when running on different machine we
    ;; will need to update the IDs of entries.
    (org-brain-update-id-locations))
    ;; (hercules-def :toggle-funs #'org-brain-visualize
    ;;               :hide-funs #'org-brain-visualize-quit
    ;;               :keymap 'org-brain-visualize-mode-map
    ;;               :transient t))
#+end_src

*** Usage
| Key        | Command                              | Description                                                                       |
|------------+--------------------------------------+-----------------------------------------------------------------------------------|
| m          | =org-brain-visualize-mind-map=       | Toggle between normal and mind-map visualization.                                 |
| j or TAB   | =forward-button=                     | Goto next link                                                                    |
| k or S-TAB | =backward-button=                    | Goto previous link                                                                |
| b          | =org-brain-visualize-back=           | Like the back button in a web browser.                                            |
| h or *     | =org-brain-add-child-headline=       | Add a new child /headline/ to entry                                               |
| c          | =org-brain-add-child=                | Add an existing entry, or a new /file/, as a child                                |
| C          | =org-brain-remove-child=             | Remove one the entry's child relations                                            |
| e          | =org-brain-annotate-edge=            | Annotate the connection between the visualized entry and the entry link at point. |
| p          | =org-brain-add-parent=               | Add an existing entry, or a new /file/, as a parent                               |
| P          | =org-brain-remove-parent=            | Remove one of the entry's parent relations                                        |
| f          | =org-brain-add-friendship=           | Add an existing entry, or a new /file/, as a friend                               |
| F          | =org-brain-remove-friendship=        | Remove one of the entry's friend relations                                        |
| n          | =org-brain-pin=                      | Toggle if the entry is pinned or not                                              |
| s          | =org-brain-select-dwim=              | Select an entry for batch processing.                                             |
| S          | =org-brain-select-map=               | Prefix key to do batch processing with selected entries.                          |
| t          | =org-brain-set-title=                | Change the title of the entry.                                                    |
| T          | =org-brain-set-tags=                 | Change the tags of the entry.                                                     |
| d          | =org-brain-delete-entry=             | Choose an entry to delete.                                                        |
| l          | =org-brain-visualize-add-resource=   | Add a new resource link in entry                                                  |
| r          | =org-brain-open-resource=            | Choose and open a resource from the entry.                                        |
| C-y        | =org-brain-visualize-paste-resource= | Add a new resource link from clipboard                                            |
| a          | =org-brain-visualize-attach=         | Run =org-attach= on entry (headline entries only)                                 |
| A          | =org-brain-archive=                  | Archive the entry (headline entries only)                                         |
| o          | =org-brain-goto-current=             | Open current entry for editing                                                    |
| O          | =org-brain-goto=                     | Choose and edit one of your =org-brain= entries                                   |
| v          | =org-brain-visualize=                | Choose and visualize a different entry                                            |
| w          | =org-brain-visualize-random=         | Visualize one of your entries at random.                                          |
| W          | =org-brain-visualize-wander=         | Visualize at random, in a set interval. =W= again to cancel.                      |

** Org bullets
#+begin_src emacs-lisp :results output silent
  (use-package org-bullets
    :straight (:host github :repo "emacsorphanage/org-bullets")
    :disabled t ;; feels slower, might be expensive
    :hook (org-mode . org-bullets-mode))
#+end_src

** Export as epub
Needs a working =zip= exe.

#+begin_src emacs-lisp :results output silent
  (use-package ox-epub
    :straight (:host github :repo "ofosos/ox-epub")
    :commands org-epub-export-to-epub)
#+end_src

** Screenshot from system clipboard
[[http://www.sastibe.de/2018/11/take-screenshots-straight-into-org-files-in-emacs-on-win10/][Source]], modified to allow the user to select a directory.

#+begin_src emacs-lisp :results output silent
  (defun my-org-paste-clipboard-screenshot (&optional dir)
    "Take a screenshot into a time stamped unique-named file in the
       same directory as the org-buffer and insert a link to this file."
    (interactive (list (read-directory-name "" "" "images")))
    (unless (equal system-type 'windows-nt)
      (user-error "Implementation currently only works on windows, this is %s"
                  system-type))
    (let ((filename (concat
                     (make-temp-name
                      (concat (file-name-as-directory dir)
                              (-> (buffer-file-name)
                                  file-name-nondirectory
                                  file-name-sans-extension)
                              "_"
                              (format-time-string "%Y-%m-%dT%H%M%S")))
                     ".png")))
      (unless (file-directory-p dir)
        (make-directory dir))
      (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('"
                             filename
                             "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
      (insert (concat "[[file:" filename "]]"))
      (message "Image saved as %s" filename)
      (org-display-inline-images)
      filename))
#+end_src
** Org Edna
https://www.nongnu.org/org-edna-el/
#+begin_src emacs-lisp :results output silent
  (use-package org-edna
    :straight (org-edna)
    :after org
    :config
    (org-edna-load))
#+end_src

* Git
** Magit
If magit complains about not finding the config on windows, it's
because of [[https://github.com/magit/magit/issues/1497][this issue]], the easiest solution is to make a link

: mklink %APPDATA%\.gitconfig %USERPROFILE%\.gitconfig

- [ ] Make a command that commits and pushes
- [ ] Make it so I don't have to do !git all the time.


#+begin_src emacs-lisp :results output silent
  (use-package magit
    :straight (:host github :repo "magit/magit")
    :commands (magit-status
               magit-pull
               magit-commit)
    :init
    (evil-define-command ex-magit-cli (cmd)
      "Calls specific magit functions"
      (interactive "<a>")
      (cond
       ((eq cmd nil) (magit-status))
       (t (magit-shell-command (concat "git " cmd)))))
    (evil-ex-define-cmd "git" 'ex-magit-cli)
    (evil-ex-define-cmd "gg" 'ex-magit-cli)
    :hook ((git-commit-setup . aggressive-fill-paragraph-mode)
           (git-commit-setup . markdown-mode)))
#+end_src

*** Evil bindings

[2019-02-18 Mon 12:49] Magit changed from magit-popup to transient,
and that breaks this addon
https://github.com/syl20bnr/spacemacs/issues/11978

Current fix ([2019-02-18 Mon 13:06]) is to pin magit to an earlier
config. This configuration is stored in =straight/versions/default.el=

#+begin_src emacs-lisp :results output silent
  (use-package evil-magit
    :straight (:host github
               :repo "emacs-evil/evil-magit")
    :after (magit)
    :config
    (evil-magit-init))
#+end_src

*** Magit Todo
Currently disabled because we can't get it to work (it's not showing
up, on windows at least).
#+begin_src emacs-lisp :results output silent
  (use-package magit-todos
    :disabled t
    :straight (:host github :repo "alphapapa/magit-todos")
    :custom
    (magit-todos-nice
     nil
     "`nice' does not exist on windows")
    :hook
    (magit-status-mode . magit-todos-mode))
#+end_src

*** Smerge-mode hydras

** Git Gutter
#+begin_src emacs-lisp :results output silent
  (use-package git-gutter+
    :straight (:host github :repo "nonsequitur/git-gutter-plus")
    :disabled t
    :general
    (:states  'normal
     :keymaps 'git-gutter+-mode-map
     "[ h"    'git-gutter+-previous-hunk
     "] h"    'git-gutter+-next-hunk
     "g h s"  'git-gutter+-stage-hunks
     "g h u"  'git-gutter+-revert-hunks
     "g h h"  'git-gutter+-show-hunk-inline-at-point)
    :hook (prog-mode . git-gutter+-mode)
    :init
    (use-package git-gutter-fringe+
      :straight (:host github :repo "nonsequitur/git-gutter-fringe-plus")
      :if (display-graphic-p)
      :after git-gutter+)
    :custom
    (git-gutter+-hide-gutter t))
#+end_src

** Git hunk textobjects

Look at ~git-gutter+-diffinfo-at-point~ and see if we can leverage
that for the range we want

* vdiff
#+begin_src emacs-lisp :results output silent
  (use-package vdiff
    :straight (:host github :repo "justbur/emacs-vdiff")
    :commands vdiff-hydra/body
    :init
    (evil-define-command ex-vdiff-cli (cmd)
      (interactive "<a>")
      (cond
       (t (vdiff-current-file))))
    (evil-ex-define-cmd "vdiff" 'ex-vdiff-cli))
#+end_src

** vdiff for magit
#+begin_src emacs-lisp :results output silent
  (use-package vdiff-magit
    :straight (:host github :repo "justbur/emacs-vdiff-magit")
    :after magit
    :disabled t
    :general
    (magit-mode-map
     "e" 'vdiff-magit-dwim
     "E" 'vdiff-magit)
    :init
    (with-eval-after-load 'magit
      (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
      (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
      (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
      (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)))
#+end_src

* Diff-hl
#+begin_src emacs-lisp :results output silent
  (use-package diff-hl
    :straight (:host github :repo "dgutov/diff-hl")
    :defer 10
    :config
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (global-diff-hl-mode))
#+end_src

* Eyebrowse
#+begin_src emacs-lisp :results output silent
  (use-package eyebrowse
    :straight (:host github :repo "wasamasa/eyebrowse")
    :commands (eyebrowse-switch-to-window-config
               eyebrowse-create-window-config
               eyebrowse-close-window-config)
    :general
    (:states '(normal motion)
     "gt" 'eyebrowse-next-window-config
     "gT" 'eyebrowse-prev-window-config)
    :custom
    (eyebrowse-wrap-around t)
    (eyebrowse-new-workspace t)
    :init
    (evil-define-command my-new-evil-tab (file)
      "Note that :h :tabe in vim indicates that it's file only, not
  buffer."
      (interactive "<f>")
      (require 'eyebrowse)
      (let ((eyebrowse-new-workspace (if file
                                         (lambda () (find-file file))
                                       eyebrowse-new-workspace)))
        (eyebrowse-create-window-config)))
    (evil-ex-define-cmd "tabn[ew]"   'eyebrowse-create-window-config)
    (evil-ex-define-cmd "tabe[dit]"  'my-new-evil-tab)
    (evil-ex-define-cmd "tabc[lose]" 'eyebrowse-close-window-config)
    (evil-ex-define-cmd "tabs"       'eyebrowse-switch-to-window-config)
    (evil-ex-define-cmd "tabconfig" '(lambda ()
                                       (interactive)
                                       (funcall-interactively
                                        'my-new-evil-tab user-config-file)))
    (evil-ex-define-cmd "tabinit" '(lambda ()
                                     (interactive)
                                     (funcall-interactively
                                      'my-new-evil-tab user-init-file)))
    (evil-ex-define-cmd "tablocal" '(lambda ()
                                      (interactive)
                                      (funcall-interactively
                                       'my-new-evil-tab user-local-file)))
    :config
    (eyebrowse-mode)
    (defun my-delete-window-config-or-frame (oldfun &rest old_args)
      "Checks if there are other \"tabs\" when closing a frame.
  If there is, close the tab, otherwise, delete the frame"
      (interactive)
      (let* ((configs (frame-parameter nil 'eyebrowse-window-configs))
             (slots (mapcar 'car configs))
             (size (length slots)))
        (if (eq 1 size)
            (call-interactively oldfun)
          (eyebrowse-close-window-config))))
    (advice-add 'delete-frame :around 'my-delete-window-config-or-frame))
#+end_src

* Display
** Prefer dark backgrounds
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'frame-background-mode 'dark)
  (set-terminal-parameter nil 'background-mode 'dark)
#+end_src

** Solarized
[[https://ethanschoonover.com/solarized/][Website with more descriptions]]

#+begin_src emacs-lisp :results output silent
  (use-package solarized-theme
    :straight (:host github :repo "bbatsov/solarized-emacs")
    :custom
    (solarized-use-variable-pitch nil)
    (solarized-distinct-fringe-background nil)
    (solarized-high-contrast-mode-line nil)
    (solarized-use-less-bold t)
    (solarized-use-more-italic nil)
    (solarized-scale-org-headlines nil)
    (solarized-height-minus-1 1.0)
    (solarized-height-plus-1 1.0)
    (solarized-height-plus-2 1.0)
    (solarized-height-plus-3 1.0)
    (solarized-height-plus-4 1.0)
    :init
    (dolist (col '((sol-base03  . "#002b36")
                   (sol-base02  . "#073642")
                   (sol-base01  . "#586e75")
                   (sol-base00  . "#657b83")
                   (sol-base0   . "#839496")
                   (sol-base1   . "#93a1a1")
                   (sol-base2   . "#eee8d5")
                   (sol-base3   . "#fdf6e3")
                   (sol-yellow  . "#b58900")
                   (sol-orange  . "#cb4b16")
                   (sol-red     . "#dc322f")
                   (sol-magenta . "#d33682")
                   (sol-violet  . "#6c71c4")
                   (sol-blue    . "#268bd2")
                   (sol-cyan    . "#2aa198")
                   (sol-green   . "#859900")))
      ;; TODO: set documentation string
      (set (car col) (cdr col)))
    :config
    (load-theme 'solarized-dark t))
#+end_src

** Fonts
We are preferring these fonts because they look nicer and play nicer
with Chinese/Japanese.

0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?

#+begin_src emacs-lisp :results output silent
  (cond
   ((find-font (font-spec :name "Iosevka")) (set-frame-font "Iosevka-10" nil t))
   ((find-font (font-spec :name "Consolas")) (set-frame-font "Consolas-10" nil t)))
#+end_src

* Text
** Aggressive Fill Paragraph
#+begin_src emacs-lisp :results output silent
  (use-package aggressive-fill-paragraph
    :straight (:host github :repo "davidshepherd7/aggressive-fill-paragraph-mode")
    :hook ((org-mode . aggressive-fill-paragraph-mode)
           (markdown-mode . aggressive-fill-paragraph-mode)))
#+end_src

** Aggressive Indent
#+begin_src emacs-lisp :results output silent
  (use-package aggressive-indent
    :straight (:host github :repo "malabarba/aggressive-indent-mode")
    :commands (aggressive-indent-mode))
#+end_src

** Yasnippet
#+begin_src emacs-lisp :results output silent
  (use-package yasnippet
    :defer 20
    :straight (:host github :repo "joaotavora/yasnippet")
    :commands (yas-minor-mode
               yas-expand-snippet)
    :hook
    ((prog-mode . yas-minor-mode)
     (org-mode . yas-minor-mode))
    :general
    (yas-keymap
     "C-j" 'yas-next-field-or-maybe-expand
     "C-k" 'yas-prev-field)
    (:states 'normal
     :prefix my-default-evil-leader-key
     "s s" 'yas-new-snippet
     "s a" 'yas-insert-snippet
     "s f" 'yas-visit-snippet-file)
    (snippet-mode-map
     [remap evil-save-and-close]          'yas-load-snippet-buffer-and-close
     [remap evil-save-modified-and-close] 'yas-load-snippet-buffer-and-close
     [remap evil-quit]                    'kill-this-buffer)
    :custom
    (yas-snippet-dirs (list (file-name-as-directory
                             (locate-user-emacs-file "snippets"))))
    (yas-indent-line 'auto)
    (yas-also-auto-indent-first-line t)
    :init
    (evil-define-command ex-snippet (cmd)
      (interactive "<a>")
      (require 'yasnippet)
      (cond
       ((string= cmd "reload") (yas-reload-all))
       ((string= cmd "add") (yas-new-snippet))
       (t (yas-visit-snippet-file))))
    (evil-ex-define-cmd "sni[ppets]" 'ex-snippet)
    :config
    (defun yas-with-comment (str)
      (format "%s%s%s" comment-start str comment-end))
    (yas-global-mode))
#+end_src

* Projectile
#+begin_src emacs-lisp :results output silent
  (use-package projectile
    :straight (:host github :repo "bbatsov/projectile")
    :commands (projectile-mode
               projectile-project-p
               projectile-ag)
    :defer 4
    :custom
    (projectile-tags-command
     "ctags -R -e -f \"%s\" %s \"%s\"")
    :config
    (defun projectile-regenerate-ctags ()
      "ctags does not take in directories as arguments. It does,
  however, look at the current directory"
      (interactive)
      (let* ((project-root (projectile-project-root))
             (tags-exclude (projectile-tags-exclude-patterns))
             (tags-file (expand-file-name projectile-tags-file-name))
             (command (format "ctags -R -e -f \"%s\" %s" tags-file tags-exclude))
             shell-output exit-code)
        (with-temp-buffer
          (let ((temp-dir default-directory))
            (cd project-root)
            (setq exit-code (call-process-shell-command command nil (current-buffer))
                  shell-output (string-trim
                                (buffer-substring (point-min) (point-max))))
            (cd temp-dir)))
        (unless (zerop exit-code)
          (error shell-output))
        (visit-tags-table tags-file)
        (message "Regenerated %s" tags-file)))
    (projectile-mode))
#+end_src

** Ivy/Counsel Projectile
#+begin_src emacs-lisp :results output silent
  (use-package counsel-projectile
    :straight (:host github :repo "ericdanan/counsel-projectile")
    :commands (council-projectile-ag)
    :general
    (:states '(normal motion)
     "+" 'counsel-projectile
     "M-+" 'counsel-projectile-ag)
    :init
    (evil-ex-define-cmd "pp" 'counsel-projectile))
#+end_src

** Org-Projectile
#+begin_src emacs-lisp :results output silent
  (use-package org-projectile
    :straight (:host github :repo "IvanMalison/org-projectile")
    :commands (org-projectile-project-todo-entry
               org-projectile-get-project-todo-file)
    :init
    (with-eval-after-load 'org-capture
     (add-to-list 'org-capture-templates (org-projectile-project-todo-entry))) ;; here
    (evil-ex-define-cmd "todo" #'(lambda () (interactive)
                                   (require 'projectile)
                                   (require 'org-projectile)
                                   (find-file (org-projectile-get-project-todo-file
                                               (projectile-project-root)))))
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath ".todo"
          org-agenda-files (append org-agenda-files (org-projectile-todo-files))))
#+end_src

** Projectile Convenience Bindings
#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "proot" '(lambda () (interactive)
                                 (require 'projectile)
                                 (dired (projectile-project-root))))
#+end_src

* Lisp
** Parinfer
#+begin_src emacs-lisp :results output silent
  (use-package parinfer
    :straight (:host github :repo "DogLooksGood/parinfer-mode")
    :commands (parinfer-mode)
    :general
    (parinfer-mode-map
     "\"" nil) ;; let smartparens do its thing
    (:states 'normal
     "g p" 'parinfer-toggle-mode)
    :custom
    (parinfer-auto-switch-indent-mode
     t "We prefer indent mode")
    (parinfer-auto-switch-indent-mode-when-closing
     t)
    :init
    (progn (setq parinfer-extensions
                 '(defaults       ; should be included.
                    pretty-parens  ; different paren styles for different modes.
                    evil           ; if you use evil.
                    smart-tab      ; c-b & c-f jump positions and smart shift with tab & s-tab.
                    smart-yank))))   ; yank behavior depend on mode.
#+end_src

** Rainbow Delimiter Mode
Consider deprecating this now we're trying out prism

#+begin_src emacs-lisp :results output silent
  (use-package rainbow-delimiters
    :straight (:host github :repo "Fanael/rainbow-delimiters")
    :commands (rainbow-delimiters-mode)
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow Identifiers Mode
It looks fairly jarring to be very honest.

#+begin_src emacs-lisp :results output silent
  (use-package rainbow-identifiers
    :straight (:host github :repo "Fanael/rainbow-identifiers")
    :commands (rainbow-identifiers-mode))
#+end_src

** Rainbow Blocks
Refer to prism

#+begin_src emacs-lisp :results output silent
  (use-package rainbow-blocks
    :straight (:host github :repo "istib/rainbow-blocks")
    :disabled t
    :commands (rainbow-blocks-mode
               rainbow-blocks-mode-enable))
#+end_src

** Prism mode
Much like rainbow blocks mode, but better.

#+begin_src emacs-lisp :results output silent
  (use-package prism
    :straight (:host github :repo "alphapapa/prism.el")
    :commands (prism-mode
               prism-whitespace-mode)
    :preface
    (use-package anaphora
      :straight (:host github :repo "rolandwalker/anaphora"))
    :config
    (prism-set-colors
      :num 24
      :colors
      (list 'font-lock-constant-face 'font-lock-keyword-face 'font-lock-type-face 'font-lock-string-face)
      :desaturations
      (list 10 20 30)
      :lightens
      (list 0 -2.5 -5)))
#+end_src

** Smartparens

TODO: Make it so that if the point is inside {} or something similar,
pressing RET autoformats it, instead of doing nothing as it does right now

#+begin_src emacs-lisp :results output silent
  (use-package smartparens
    :straight (:host github :repo "Fuco1/smartparens" :flavor melpa)
    :diminish smartparens-mode
    :commands (sp-local-pair
               smartparens-global-mode)
    :hook
    (prog-mode . (lambda () (interactive)
                   (require 'smartparens-config) ;; load some default configurations
                   (smartparens-global-mode)))
    :general
    (:states 'normal
     :prefix my-default-evil-leader-key
     "." 'smartparens-mode)
    :custom
    (sp-cancel-autoskip-on-backward-movement
     nil
     "We want to maintain the chomp-like behavior of electric-pair")
    (sp-autoskip-closing-pair
     'always
     "Maintain chomp-like behavior of electric-pair")
    :config
    ;;(smartparens-global-strict-mode)
    ;;(show-smartparens-global-mode)
    ;; define some helper functions
    (defun my-add-newline-and-indent-braces (_opening_delimiter
                                             _actions
                                             _context)
      "adds that cool vim indent thing we always wanted, Refer to WHEN
    segment of `sp-pair' documentation on what each parameter does"
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))
    ;; update the global definitions with some indenting
    ;; I think that the nil is the flag that controls property inheritance
    ;;note: for some reason tab isn't recognised. might be yasnippet intefering.
    ;;learn to use ret for now
    (sp-pair "{" nil :post-handlers '((my-add-newline-and-indent-braces "RET")))
    (sp-pair "[" nil :post-handlers '((my-add-newline-and-indent-braces "RET")))
    (sp-pair "(" nil :post-handlers '((my-add-newline-and-indent-braces "RET"))))
#+end_src

* Elisp                                                               :major:
package is known as elisp-mode but it reads as emacs-lisp

#+begin_src emacs-lisp :results output silent
  (use-package elisp-mode
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . prism-mode)
           (emacs-lisp-mode . parinfer-mode)
           (emacs-lisp-mode . update-evil-shift-width)
           (emacs-lisp-mode . evil-cleverparens-mode)))
           ;; (emacs-lisp-mode . (lambda ()
           ;;                      (mapc (lambda (pair) (push pair
           ;;                                            prettify-symbols-alist
           ;;                            '(("nil"      . #x2205)
           ;;                              ("not"      . #xac)
           ;;                              ("<="       . #x2264)
           ;;                              (">="       . #x2265)
           ;;                              ;; ("defun" . #x0192)
           ;;                              ("or"       . #x2228)
           ;;                              ("and"      . #x2227))))
#+end_src

** Update Indentation Function
NOTE: We want to carefully override this
https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned
https://github.com/Fuco1/.emacs.d/blob/af82072196564fa57726bdbabf97f1d35c43b7f7/site-lisp/redef.el#L20-L94

#+begin_src emacs-lisp :results output silent
  (defun my-updated-lisp-indent-function (indent-point state)
    "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.

   INDENT-POINT is the position at which the line being indented begins.
   Point is located at the point to indent under (for default indentation);
   STATE is the `parse-partial-sexp' state for that position.

   If the current line is in a call to a Lisp function that has a non-nil
   property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
   it specifies how to indent.  The property value can be:

   ,* `defun', meaning indent `defun'-style
   (this is also the case if there is no property and the function
   has a name that begins with \"def\", and three or more arguments);

   ,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;

   ,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.

  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
    (let ((normal-indent (current-column))
          (orig-point (point)))
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond
       ;; car of form doesn't seem to be a symbol, or is a keyword
       ((and (elt state 2)
             (or (not (looking-at "\\sw\\|\\s_"))
                 (looking-at ":")))
        (if (not (> (save-excursion (forward-line 1) (point))
                    calculate-lisp-indent-last-sexp))
            (progn (goto-char calculate-lisp-indent-last-sexp)
                   (beginning-of-line)
                   (parse-partial-sexp (point)
                                       calculate-lisp-indent-last-sexp 0 t)))
        ;; Indent under the list or under the first sexp on the same
        ;; line as calculate-lisp-indent-last-sexp.  Note that first
        ;; thing on that line has to be complete sexp since we are
        ;; inside the innermost containing sexp.
        (backward-prefix-chars)
        (current-column))
       ((and (save-excursion
               (goto-char indent-point)
               (skip-syntax-forward " ")
               (not (looking-at ":")))
             (save-excursion
               (goto-char orig-point)
               (looking-at ":")))
        (save-excursion
          (goto-char (+ 2 (elt state 1)))
          (current-column)))
       (t
        (let ((function (buffer-substring (point)
                                          (progn (forward-sexp 1) (point))))
              method)
          (setq method (or (function-get (intern-soft function)
                                         'lisp-indent-function)
                           (get (intern-soft function) 'lisp-indent-hook)))
          (cond ((or (eq method 'defun)
                     (and (null method)
                          (> (length function) 3)
                          (string-match "\\`def" function)))
                 (lisp-indent-defform state indent-point))
                ((integerp method)
                 (lisp-indent-specform method state
                                       indent-point normal-indent))
                (method
                 (funcall method indent-point state))))))))
  (advice-add 'lisp-indent-function :override 'my-updated-lisp-indent-function)
#+end_src

** Elmacro
#+begin_src emacs-lisp :results output silent
  (use-package elmacro
    :straight (:host github :repo "Silex/elmacro")
    :commands (elmacro-show-last-macro
               elmacro-show-last-commands
               elmacro-clear-recorded-commands)
    :config
    (elmacro-mode))
#+end_src

* Racket
#+begin_src emacs-lisp :results output silent
  (use-package racket-mode
    :straight (:host github :repo "greghendershott/racket-mode")
    :commands (racket-mode)
    :mode "\\.rkt\\'"
    :hook ((racket-mode . rainbow-delimiters-mode)
           (racket-mode . parinfer-mode)
           (racket-mode . prism-mode)
           (racket-mode . evil-cleverparens-mode))
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("rkt" . racket) org-src-lang-modes)))
#+end_src

* Deft
There's an issue when re-entering the deft buffer where we're in
normal mode and not insert mode. Not sure why that is happening, since
the initial entry works as per =deft-mode-hook=

There has been concerns about the performance of deft on folders
containing a lot of files, and if the files are themselves large.

#+begin_src emacs-lisp :results output silent
  (use-package deft
    :straight (:host github :repo "jrblevin/deft")
    :commands (deft
               deft-filter
               deft-setup) ;; call this if no .deft folder is found
    :custom
    (deft-auto-save-interval 0.0
      "Disable autosave because of permissions issues causing massive
      lag")
    ;; enc is just what we call encrypted files. we do this so that
    ;; org-agenda-files won't try to open journal.org
    (deft-extensions '("org" "enc" "md")
      "Set the extensions for deft notes")
    (deft-recursive t
      "Recursively search so we can organise by folders")
    (deft-time-format "%Y%m%dT%H%M%z")
    (deft-use-filter-string-for-filename t)
    (deft-use-filename-as-title t)
    (deft-file-naming-rules '((noslash . "-")
                              (nospace . "-")
                              (case-fn . downcase)))
    :general
    (deft-mode-map
      [remap evil-quit] 'quit-window)
    (:keymaps 'deft-mode-map
     :states  '(insert normal motion)
     "C-j"    'widget-forward
     "C-k"    'widget-backward
     ;; make it more like helm, which defaults to this
     "M-j"    'widget-forward
     "M-k"    'widget-backward)
    (:keymaps 'deft-mode-map
     :states  'normal
     ;; first emacsy binding in a vim state [2018-03-21 Wed]
     "q"      'quit-window
     "p"      'deft-filter-yank
     "r r"    'deft-archive-file
     "d d"    'deft-delete-file)
    (:keymaps 'deft-mode-map
     :states  'insert
     "C-w"    'deft-filter-decrement-word
     "C-u"    'deft-filter-clear)
    :hook ((deft-open-file . org-mode)
           (deft-mode-hook . deft-refresh)
           (deft-mode-hook . evil-insert-state))
    :init
    (evil-define-command ex-deft-forwarding-arg (filter)
      "If given an argument, pre-populates the deft filter with
      that argument"
      (interactive "<a>")
      (deft-filter filter t)
      (deft))
    (evil-ex-define-cmd "n[ote]" 'ex-deft-forwarding-arg)
    (evil-ex-define-cmd "nn" 'ex-deft-forwarding-arg)
    (evil-set-initial-state 'deft-mode 'insert)
    :config
    (when (boundp 'config-local-syncthing-folder)
      (customize-set-variable 'deft-directory
                           (file-name-as-directory
                            (concat
                             (file-name-as-directory
                              config-local-syncthing-folder)
                             "notes")))))
#+end_src

* AES Encryption

#+begin_src emacs-lisp :results output silent
  (use-package aes
    :defer nil
    :straight (:host github :repo "Sauermann/emacs-aes")
    :commands (aes-toggle-encryption ;; this makes it auto encrypt/decrypt
               aes-remove-encryption-hook
               aes-is-encrypted
               aes-enable-auto-decryption
               aes-encrypt-buffer-or-string
               aes-decrypt-buffer-or-string)
    :hook (change-major-mode . (lambda ()
                                 (when (aes-is-encrypted)
                                   (auto-save-mode -1)
                                   (aes-toggle-encryption))))
    :init
    (evil-define-command ex-encrypt-buffer ()
      (interactive)
      (if (aes-is-encrypted)
          (aes-decrypt-current-buffer)
        (aes-encrypt-current-buffer)))
    (evil-ex-define-cmd "X" 'ex-encrypt-buffer)
    (add-to-list 'auto-mode-alist '("\\.enc\\'" #'(lambda ()
                                                    (when (aes-is-encrypted)
                                                      (aes-toggle-encryption))) t)))
#+end_src

** Encrypt operator
#+begin_src emacs-lisp :results output silent
  (evil-define-operator evil-encrypt-aes (beg end)
    "Attempt to encrypt or decrypt a range using
  `aes-encrypt-buffer-or-string' and `aes-decrypt-buffer-or-string'"
    (require 'aes)
    (let ((buf (current-buffer)))
      (with-temp-buffer
        ;; Copy region into a temporary buffer so we can encrypt/decrypt
        (insert-buffer-substring buf beg end)
        ;; Discard newline so the aes functions can check if it's
        ;; encrypted. We might want to just skip the newlines instead of
        ;; discarding them in the future, so that a-textobjects can also
        ;; work instead of just i-textobjects
        (flush-lines "^$" (point-min) (point-max))
        (if (aes-is-encrypted)
            (aes-decrypt-buffer-or-string (current-buffer))
          (aes-encrypt-buffer-or-string (current-buffer)))
        ;; Copy result back into original buffer
        (let ((temp-buf (current-buffer)))
          (with-current-buffer buf
            ;; Delete original text before copying
            (delete-region beg end)
            (insert-buffer-substring temp-buf))))))
#+end_src

#+begin_src emacs-lisp :results output silent
  (general-define-key
    :keymaps 'normal
    "g X" 'evil-encrypt-aes)
#+end_src

* Clojure                                                             :major:
clojurescript-mode derives from clojure-mode

#+begin_src emacs-lisp :results output silent
  (use-package clojure-mode
    :straight (:host github :repo "clojure-emacs/clojure-mode")
    :commands (clojure-mode
               clojurescript-mode)
    :hook ((clojure-mode . rainbow-delimiters-mode)
           (clojure-mode . parinfer-mode)
           (clojure-mode . prism-mode)
           (clojure-mode . update-evil-shift-width)
           (clojure-mode . show-paren-mode))
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("edn" . clojure) org-src-lang-modes)
      (cl-pushnew '("clj" . clojure) org-src-lang-modes)
      (cl-pushnew '("cljs" . clojurescript) org-src-lang-modes)))
#+end_src

** CIDER
When using straight, we first encounter =cider-test.el= not found, and
then later on =package sesman not found in recipe repositories=

Sesman is not found normally by cider, so we had to manually clone it

This is actally fairly expensive to load
#+begin_src emacs-lisp :results output silent
  (use-package sesman
    :straight (:host github :repo "vspinu/sesman")
    :defer t)
  (use-package cider
    :commands (cider-jack-in
               cider-connect)
    :straight (:host github :repo "clojure-emacs/cider"))
#+end_src

We were unable to launch a shadow-cljs nREPL directly, but we are able
to successfully connect (using =cider-connect-cljs=) into a repl we
ran using ~shadow-cljs watch app~. Do note that the socket REPL and
nREPL server runs on different ports, and neither were the ones
recommended by the cider completion engine.

We should look at customizing cider someday.

* Rust                                                                :major:
#+begin_src emacs-lisp :results output silent
  (use-package rust-mode
    :straight (:host github :repo "rust-lang/rust-mode")
    :mode
    ("\\.rs\\'" . rust-mode)
    :custom
    (rust-format-on-save t)
    :general
    (:states 'insert
     :keymaps 'rust-mode-map
     "RET" 'comment-indent-new-line)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("rust" . rust) org-src-lang-modes)))
#+end_src

* TODO Dired
- Make it more like netrw


[[https://gist.github.com/t-mart/610795fcf7998559ea80][Netrw map]]

#+begin_src emacs-lisp :results output silent
  (general-define-key
   :states 'normal
   :keymaps 'dired-mode-map
   "<SPC>" nil                       ; was shadowing leader key bindings
   "SPC" nil                         ; was shadowing leader key bindings
   "-" 'dired-up-directory
   "d" 'dired-create-directory
   "+" nil) ; don't block org-projectile
#+end_src

#+begin_src emacs-lisp :results output silent
  (evil-define-command open-dired-window ()
    (interactive)
    (if buffer-file-name
        (dired (file-name-directory (buffer-file-name)))
      (dired default-directory)))
  (evil-ex-define-cmd "Ex[plore]" 'open-dired-window)
  (evil-ex-define-cmd "Sex[plore]" '(lambda () (interactive)
                                      (call-interactively 'evil-window-split)
                                      (open-dired-window)))
  (evil-ex-define-cmd "Vex[plore]" '(lambda () (interactive)
                                      (call-interactively 'evil-window-vsplit)
                                      (open-dired-window)))
#+end_src

note: use :Ex instead like Vim does
# #+begin_src emacs-lisp :results output silent
#   (general-define-key :keymaps 'normal
#     "-" 'open-dired-window)
# #+end_src

* Help
#+begin_src emacs-lisp :results output silent
  ;; (general-define-key
  ;;  :keymaps 'help-mode-map
  ;;  :states 'normal
  ;;  "f" 'ace-link-help
  ;;  "F" 'ace-link-help)
#+end_src
* Help+
- Emacswiki :: https://www.emacswiki.org/emacs/HelpPlus


These packages are from emacswiki, and are currently not being maintained.

They are being stored and loaded locally, since they are not on melpa or any
package manager

#+begin_src emacs-lisp :results output silent
  (use-package help+
    :defer 7
    :load-path "local-packages/")
  (use-package help-macro+
    :defer 7
    :load-path "local-packages/")
  (use-package help-mode+
    :defer 7
    :load-path "local-packages/")
  (use-package help-fns+
    :defer 7
    :commands (describe-keymap
               describe-buffer
               describe-command
               describe-option
               describe-key-briefly
               describe-option-of-type
               describe-copying
               find-function-on-key)
    :load-path "local-packages/")
#+end_src

* Markdown                                                            :major:
#+begin_src emacs-lisp :results output silent
  (use-package markdown-mode
    :straight (:host github :repo "jrblevin/markdown-mode")
    :mode "\\.md\\'"
    :commands (markdown-mode)
    :hook (markdown-mode . orgtbl-mode)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("md" . markdown) org-src-lang-modes)))
#+end_src

* Dumb Jump
#+begin_src emacs-lisp :results output silent
  (use-package dumb-jump
    :straight (:host github :repo "jacktasia/dumb-jump")
    :custom
    (dumb-jump-selector 'ivy)
    :general
    (:states 'normal
     "g d" 'dumb-jump-go))
#+end_src

* Anki

** Orgmode flavored anki editing                                  :disabled:
#+begin_src emacs-lisp :results output silent
  (use-package anki-editor
    :straight (:host github :repo "louietan/anki-editor")
    :commands (anki-editor-push-notes
               anki-editor-retry-failure-notes
               anki-editor-insert-note
               anki-editor-cloze-region
               anki-editor-export-subtree-to-html
               anki-editor-convert-region-to-html))
#+end_src

* JSON                                                                :major:
#+begin_src emacs-lisp :results output silent
  (use-package json-mode
    :straight (:host github :repo "joshwnj/json-mode")
    :mode "\\.json\\'"
    :commands (json-mode)
    :hook
    (json-mode . prism-mode)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("json" . json) org-src-lang-modes)))
#+end_src

* Wgrep
Being able to mass-edit using search results seem interesting
http://blog.binchen.org/posts/use-wgrep-and-evil-to-replace-text-efficiently.html

Note that for some reason using plain old =ag= works while
=counsel-ag= does not.

In the =ag= buffer call =C-c C-p= to launch wgrep.

#+begin_src emacs-lisp :results output silent
  (use-package wgrep
    :straight (:host github :repo "mhayashi1120/Emacs-wgrep")
    :commands (wgrep-change-to-wgrep-mode
               ivy-wgrep-change-to-wgrep-mode))
#+end_src

* Silver Searcher (Ag)
#+begin_src emacs-lisp :results output silent
  (use-package ag
    :straight (:host github :repo "Wilfred/ag.el")
    :commands ag)
#+end_src

** Ag Convenience Bindings
Call =ag= when not in a project; call =projectile-ag= otherwise.

If additional arguments are passed into the command, use those as
arguments. Otherwise default to the word at point, but allow the user
to type it out.

#+begin_src emacs-lisp :results output silent
  (evil-define-command config-ag-explicit (arg)
    (interactive "<a>")
    (let ((search-term (if arg arg
                         (let ((word (thing-at-point 'word)))
                           (read-string "Ag query: "
                                        word nil word))))
          (root-dir (or (projectile-project-p)
                      default-directory)))
        (ag search-term root-dir)))
#+end_src

#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "ag" #'config-ag-explicit)
#+end_src

* Ripgrep (rg)
:PROPERTIES:
:DEPENDENCIES: wgrep
:END:

*rg* buffer bindings

| Key | Description                              |
|-----+------------------------------------------|
| c   | Toggle case insensitive setting          |
| d   | Change directory                         |
| f   | Change file pattern                      |
| g   | Rerun search                             |
| i   | Toggle --no-ignore flag                  |
| l   | List search buffers in a separate buffer |
| r   | Edit search string as regexp             |
| s   | Save search result to unique name        |
| S   | Save search result, prompt for name      |
| t   | Edit search string as literal            |
| w   | Switch to wgrep mode                     |
| C-f | Navigate forward in search history       |
| C-b | Navigate backward in search history      |

#+begin_src emacs-lisp :results output silent
  (use-package rg
    :straight (:host github :repo "dajva/rg.el")
    :commands (rg
               rg-project
               rg-dwim
               rg-literal)
    :custom
    (rg-ignore-case 'smart)
    :general
    (rg-mode-map
     :states '(motion normal)
      "gg" 'evil-goto-first-line)
    :init
    (evil-define-command config-rg-explicit (arg)
      (interactive "<a>") ;TODO: Figure out how to programmatically generate a files list, which we need in addition to a query
      (cond
       ;; ((and arg (projectile-project-p)) (rg-project arg))
       ((and (not arg) (projectile-project-p)) (call-interactively 'rg-project))
       ;; (arg (rg arg))
       (t (call-interactively 'rg))))
    (evil-ex-define-cmd "rg" 'rg)
    (evil-ex-define-cmd "prg" 'rg-project))
#+end_src
* C++
** Indentation of 4
#+begin_src emacs-lisp :results output silent
  (setq-default c-basic-offset 4)
#+end_src

** Default to K&R style
#+begin_src emacs-lisp :results output silent
  (setq-default c-default-style "k&r")
#+end_src

** Newline in comments should insert an indented comment
#+begin_src emacs-lisp :results output silent
  (general-define-key :states 'insert
                      :keymaps 'c-mode-base-map
                      "RET" 'comment-indent-new-line)
#+end_src

** Treat .h files as cpp files
#+begin_src emacs-lisp :results output silent
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

** COMMENT cpp-specific ligatures
We do not support =&&= (and hence also =||=) because of conflicts with
r-value references.
#+begin_src emacs-lisp :results output silent
  (add-hook 'c-mode-common-hook
            #'(lambda ()
                (mapc (lambda (pair) (push pair prettify-symbols-alist))
                      '(("!=" . #x2260)
                        ("!" . #xac)
                        ;; ("==" . #x2a75) ;; Not supported by Iosevka
                        ;; ("->" . #x27f6) ;; Not supported by Iosevka
                        ("->" . #x2192) ;; 1-char width version
                        ("<=" . #x2264)
                        (">=" . #x2265)))))
                        ;; ("&&" . #x2227)
                        ;; ("||" . #x2228)))))
#+end_src

** Clang Format
#+begin_src emacs-lisp :results output silent
  (use-package clang-format
    :straight (:host github :repo "sonatard/clang-format")
    :commands (clang-format-region
               clang-format-buffer
               clang-format)
    :init
    ;; IF there is a .clang-format, then use that to format before
    ;; saving
    (defun my-clang-format-before-save ()
      (require 'projectile)
      (require 'clang-format)
      (require 'f)
      (when (f-exists?
             (expand-file-name ".clang-format"
                               (projectile-project-root)))
        (add-hook 'before-save-hook 'clang-format-buffer t t)))
    :hook (c++-mode . my-clang-format-before-save)
    :custom
    (clang-format-style-option "file"
                               "read from .clang-format"))
#+end_src

* Disable autoformatting modes when drawing things
You can consider =artist-mode= a featurewise superset of =picture-mode=.

#+begin_src emacs-lisp :results output silent
  (add-hook 'artist-mode-hook '(lambda () (aggressive-fill-paragraph-mode -1)))
#+end_src

* Org source block handling for Artist-mode
#+begin_src emacs-lisp :results output silent
  (with-eval-after-load 'org-src
    (cl-pushnew '("artist" . artist) org-src-lang-modes))
#+end_src

* Ledger                                                              :major:
#+begin_src emacs-lisp :results output silent
  (use-package ledger-mode
    :mode "\\.ledger\\'"
    :straight (:host github :repo "ledger/ledger-mode"
               :files (:defaults "ledger-test.el"))
    :init
      (with-eval-after-load 'org-src
        (cl-pushnew '("ledger" . ledger) org-src-lang-modes)))
#+end_src

** Evil-ledger
#+begin_src emacs-lisp :results output silent
  (use-package evil-ledger
    :straight (:host github :repo "atheriel/evil-ledger")
    :after (ledger-mode))
#+end_src

* Hledger                                                             :major:
#+begin_src emacs-lisp :results output silent
  (use-package hledger-mode
    :straight (:host github :repo "narendraj9/hledger-mode")
    :mode "\\.journal\\'")
#+end_src

* hl-todo
#+begin_src emacs-lisp :results output silent
  (use-package hl-todo
    :diminish t
    :straight (:host github :repo "tarsius/hl-todo")
    :commands (hl-todo-mode)
    :hook ((prog-mode  . hl-todo-mode)
           (yaml-mode  . hl-todo-mode))
    :general
    ;; (:states 'normal
    ;;  :prefix my-default-evil-leader-key
    ;;  "t t" 'my-helm-swoop-hl-todo)
    (:keymaps 'evil-normal-state-map
     "[ t"  'hl-todo-previous
     "] t"  'hl-todo-next)
    :custom
    (hl-todo-keyword-faces `(("TODO"   . "#b58900")
                             ("DEBUG"  . "#d33682")
                             ("BUG"    . "#dc322f")
                             ("REMOVE" . "#dc322f")
                             ("STUB"   . "#859900")
                             ("NOTE"   . "#586e75")
                             ("HACK"   . "#6c71c4")
                             ("FIXME"  . "#cb4b16"))))
    ;; :init
    ;;TODO: Make this search for regexes
    ;; (defun my-helm-swoop-hl-todo () (interactive)
    ;;        (require 'helm-swoop)
    ;;        (helm-swoop :$query hl-todo-regexp :$multiline 4)))
    ;; Stolen from https://github.com/emacs-helm/helm/wiki/Developing. Convenient!
    ;; Not used because we don't incrementally search for todos
    ;; (defun my-helm-hl-todo-items ()
    ;;   "Show `hl-todo'-keyword items in buffer."
    ;;   (interactive)
    ;;   (hl-todo--setup)
    ;;   (helm :sources (helm-build-in-buffer-source "hl-todo items"
    ;;                    :data (current-buffer)
    ;;                    :candidate-transformer (lambda (candidates)
    ;;                                             (cl-loop for c in candidates
    ;;                                                      when (string-match hl-todo--regexp c)
    ;;                                                      collect c))
    ;;                    :get-line #'buffer-substring)
    ;;         :buffer "*helm hl-todo*"))
#+end_src

* Abbrev
#+begin_src emacs-lisp :results output silent
  (setq-default abbrev-mode t)
#+end_src

#+begin_src emacs-lisp :results output silent
  (setq abbrev-file-name (locate-user-emacs-file "abbrevs.el"))
#+end_src

** Silently
#+begin_src emacs-lisp :results output silent
  (setq save-abbrevs 'silently)
#+end_src

** Abbrev bindings
#+begin_src emacs-lisp :results output silent
  (evil-define-command ex-abbreviation (arg)
    "Attempts to replicate the :abbreviate function in vim.
  :ab - Shows you the abbreviation tables
  :ab A B [C D E] - Expands \"A\" to \"B C D E\". At least 2 arguments
  must be given, otherwise it's a no-op."
    (interactive "<a>")
    ;; TODO: figure out what happens if we want the expansion to have
    ;; variable space length. We currently don't care, because odds are
    ;; we want our expansion to look like good english anyway.
    (if (not arg)
      (edit-abbrevs)
      (let* ((arguments (split-string arg))
             (size (safe-length arguments)))
        (cond
          ((= size 1) nil) ;; no op, as far as I can tell
          (t (let ((expansion (mapconcat 'identity (cdr arguments) " ")))
                (define-global-abbrev (car arguments) expansion)))))))

  (evil-ex-define-cmd "ab[breviate]" 'ex-abbreviation)

  (general-define-key
   :states 'normal
   :prefix my-default-evil-leader-key
   "a a" 'inverse-add-global-abbrev)
#+end_src

** Edit abbrevs mode
#+begin_src emacs-lisp :results output silent
  (general-define-key
   :keymaps 'edit-abbrevs-mode-map
   [remap evil-save] 'abbrev-edit-save-buffer)
#+end_src

* Writeroom
#+begin_src emacs-lisp :results output silent
  (use-package writeroom-mode
    :straight (:host github :repo "joostkremers/writeroom-mode")
    :commands (writeroom-mode)
    :custom
    (writeroom-mode-line t)
    (writeroom-bottom-divider-width 0)
    :general
    (:states 'normal
     "g z" 'writeroom-mode))
#+end_src

* Helpful
#+begin_src emacs-lisp :results output silent
  (use-package helpful
    :straight (:host github :repo "Wilfred/helpful")
    :general
    ("C-h k"   'helpful-key
     "C-h f"   'helpful-callable
     "C-h v"   'helpful-variable
     "C-h RET" 'helpful-at-point))
    ;; (helpful-mode-map
    ;;  :states 'normal
    ;;  "f" 'ace-link-help
    ;;  "F" 'ace-link-help))
#+end_src

* Elisp demos

#+begin_src emacs-lisp :results output silent
  (use-package elisp-demos
    :after (helpful)
    :straight (:host github :repo "xuchunyang/elisp-demos"
               :files (:defaults "elisp-demos.org"))
    :config
    (with-eval-after-load 'helpful
      (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
    (advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1))
#+end_src

* Make shell open in same window
- Related Spacemacs Issue ::
  https://github.com/syl20bnr/spacemacs/issues/6820


Let's try just creating the shell on the side instead of overtaking
the thing
#+begin_src emacs-lisp :results output silent
;;  (add-to-list 'display-buffer-alist '("\\*shell\\*" . (display-buffer-same-window . nil)))
#+end_src

#+begin_src emacs-lisp :results output silent
  ;; (evil-ex-define-cmd "Sshell" '(lambda () (interactive)
  ;;                                  (shell)))
  ;; (evil-ex-define-cmd "Vshell" '(lambda () (interactive)
  ;;                                  (shell)))
#+end_src

* Make cursor always move to end when entering insert mode in comint modes
#+begin_src emacs-lisp :results output silent
  (customize-set-variable 'comint-scroll-to-bottom-on-input t)
  (customize-set-variable 'comint-prompt-read-only t)
#+end_src

* Make shell mode update working directory
- Stackoverflow :: [[https://emacs.stackexchange.com/questions/5589/automatically-update-default-directory-when-pwd-changes-in-shell-mode-and-term-m][link]]


#+begin_src emacs-lisp :results output silent
  (add-hook 'shell-mode-hook (lambda ()
                               (shell-dirtrack-mode 0)
                               (set-variable 'dirtrack-list '("^.*[^ ]+:\\(.*\\)>" 1 nil))
                               (dirtrack-mode 1)))
#+end_src

* Groovy mode                                                         :major:
#+begin_src emacs-lisp :results output silent
  (use-package groovy-mode
    :straight (:host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes")
    :mode (("\\.groovy\\'" . groovy-mode)
           ("\\Jenkinsfile\\'" . groovy-mode))
    :init
    (with-eval-after-load 'org-src
        (cl-pushnew '("groovy" . groovy) org-src-lang-modes)))
#+end_src

* Hy Mode                                                             :major:
#+begin_src emacs-lisp :results output silent
  (use-package hy-mode
    :straight (:host github :repo "hylang/hy-mode")
    :mode "\\.hy\\'"
    :general
    (hy-mode-map
     :states 'insert
     "RET" 'comment-indent-new-line)
    :hook ((hy-mode . rainbow-delimiters-mode)
           (hy-mode . parinfer-mode)
           (hy-mode . prism-mode)
           (hy-mode . update-evil-shift-width)
           (hy-mode . evil-cleverparens-mode)
           (hy-mode . show-paren-mode))
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("hy" . hy) org-src-lang-modes)))
#+end_src

** ob-hy
#+begin_src emacs-lisp :results output silent
  (use-package ob-hy
    :straight (:host github :repo "brantou/ob-hy")
    :after org-src)
#+end_src

* vlf-mode
#+begin_src emacs-lisp :results output silent
  (use-package vlf
    :straight (:host github :repo "m00natic/vlfi")
    :custom (vlf-application 'dont-ask)
    :config (require 'vlf-setup))
#+end_src

* Yankpad
#+begin_src emacs-lisp :results output silent
  (use-package yankpad
    :disabled t
    :straight (:host github :repo "Kungsgeten/yankpad")
    :commands (yankpad-expand
               yankpad-edit
               yankpad-reload)
    :init
    (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
    :custom
    (yankpad-file (locate-user-emacs-file "snippets.org")))
#+end_src

* Smart tab
#+begin_src emacs-lisp :results output silent
  (use-package smart-tab
    :disabled t
    :straight (:host github :repo "genehack/smart-tab")
    :custom
    (smart-tab-using-hippie-expand t)
    :config
    (global-smart-tab-mode))
#+end_src

* Batch/CMD
#+begin_src emacs-lisp :results output silent
  (with-eval-after-load 'org-src
    (cl-pushnew '("cmd" . bat) org-src-lang-modes)
    (cl-pushnew '("batch" . bat) org-src-lang-modes))
#+end_src

* Python
#+begin_src emacs-lisp :results output silent
  (org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
#+end_src

#+begin_src emacs-lisp :results output silent
  (setq-default python-indent-offset 4)

  (general-define-key
   :keymaps 'python-mode-map
   :states 'insert
   "RET" 'comment-indent-new-line)
#+end_src

** Virtual Environment
#+begin_src emacs-lisp :results output silent
  (use-package pyvenv
    :straight (:host github :repo "jorgenschaefer/pyvenv")
    :commands (pyvenv-activate
               pyvenv-workon))
#+end_src

* Powershell
#+begin_src emacs-lisp :results output silent
  (use-package powershell.el
    :straight (:host github :repo "jschaf/powershell.el")
    :commands (powershell-mode powershell)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("powershell" . powershell) org-src-lang-modes)
      (cl-pushnew '("ps" . powershell) org-src-lang-modes))
    :config
    (defun org-babel-execute:powershell (body _params)
      (let ((explicit-shell-file-name powershell-location-of-exe))
        (shell-command-to-string body))))
#+end_src

* Access inbox.org from evil command
#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "in[box]" '(lambda ()
                                 (interactive)
                                 (if (boundp 'config-local-syncthing-folder)
                                     (find-file my-inbox-org-file))))
#+end_src

* Yaml-mode
#+begin_src emacs-lisp :results output silent
  (use-package yaml-mode
    :straight (:host github :repo "yoshiki/yaml-mode")
    :mode ("\\.yml\\'"
           "\\.yaml\\'")
    :hook
    (yaml-mode . prism-whitespace-mode)
    :general
    (yaml-mode-map
     "RET" 'newline-and-indent)
    :commands (yaml-mode)
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("yaml" . yaml) org-src-lang-modes)))
#+end_src

* Journal
#+begin_src emacs-lisp :results output silent
  (use-package org-journal
    :straight (:host github :repo "bastibe/org-journal")
    :commands org-journal-new-entry
    :custom
    (org-journal-time-format "%T")
    (org-journal-date-format "%A, %F" "Lets follow the ISO standard")
    ;; (org-journal-file-format "%F" "Lets follow the ISO standard")
    :init
    (evil-ex-define-cmd "journal" #'(lambda () (interactive)
                                      (org-journal-new-entry t)))
    (evil-ex-define-cmd "jj" 'org-journal-new-entry)
    (customize-set-variable 'org-journal-dir (file-name-as-directory
                                           (concat config-local-syncthing-folder "/notes/journal")))
    :hook
    ((org-journal-after-entry-create . evil-insert-state)
     (org-journal-after-entry-create . toggle-rot13-mode)))
#+end_src

* Cmake
#+begin_src emacs-lisp :results output silent
  (use-package cmake-mode
    :mode ("\\cmakelists.txt\\'" . cmake-mode)
    :ensure t ;; the package is nested in the greater cmake repo, and
              ;; not practical to use straight on (yet)
    :hook (cmake-mode . hl-todo-mode))
#+end_src

** Cmake-font-lock
#+begin_src emacs-lisp :results output silent
  (use-package cmake-font-lock
    :straight (:host github :repo "Lindydancer/cmake-font-lock")
    :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

* TOML mode for org-src
#+begin_src emacs-lisp :results output silent
  (with-eval-after-load 'org-src
    (cl-pushnew '("toml" . conf-toml) org-src-lang-modes))
#+end_src

* Jira
#+begin_src emacs-lisp :results output silent
  (use-package org-jira
    :defer t
    :straight (:host github :repo "baohaojun/org-jira"))
#+end_src

* Jupyter Notebook
https://millejoh.github.io/emacs-ipython-notebook/

#+begin_src emacs-lisp :results output silent
  (use-package ein
    :straight (:host github :repo "millejoh/emacs-ipython-notebook"))
#+end_src

* Focus mode
#+begin_src emacs-lisp :results output silent
  (use-package focus
    :straight (:host github :repo "larstvei/Focus")
    :commands focus-mode
    :init
    (evil-ex-define-cmd "fo[cus]" 'focus-mode))
#+end_src

* Pretty mode
#+begin_src emacs-lisp :results output silent
  (use-package pretty-mode
    :straight (:host github :repo "pretty-mode/pretty-mode")
    :defer t)
    ;; :config
    ;; (global-pretty-mode)
    ;; (global-prettify-symbols-mode))
#+end_src

* Prettify Symbols Mode
Use this instead of pretty mode because it's built in and shouldn't
spaz out as much

#+begin_src emacs-lisp :results output silent
  (global-prettify-symbols-mode)
#+end_src

* Outshine
Doesn't really work out of the box. Interesting idea though, so we're
keeping it until we figure out how to use it properly

#+begin_src emacs-lisp :results output silent
  (use-package outshine
    :straight (:host github :repo "alphapapa/outshine")
    :commands (outshine-mode))
#+end_src

* Org Kanban
This uses a custom org block, so we don't actually have to do anything
more than spell out that block and evaluate it.

#+begin_example
#+BEGIN: kanban :mirrored nil
#+END:
#+end_example

#+begin_src emacs-lisp :results output silent
  (use-package org-kanban
    :straight (:host github :repo "gizmomogwai/org-kanban")
    :defer 10)
#+end_src

* Bookmark+
This is now really expensive, and we need to trim this as much as we
can.

- [ ] Iterate through the list and lazy load the thing instead of
  making it so expensive

#+begin_src emacs-lisp :results output silent
  (use-package bookmark+
    :disabled t
    :preface
    (let ((bookmarkplus-dir (locate-user-emacs-file "local-packages/bookmark-plus/"))
          (emacswiki-base "https://www.emacswiki.org/emacs/download/")
          (bookmark-files '("bookmark+.el" "bookmark+-mac.el" "bookmark+-bmu.el"
                            "bookmark+-key.el" "bookmark+-lit.el" "bookmark+-1.el")))
      (require 'url)
      (add-to-list 'load-path bookmarkplus-dir)
      (make-directory bookmarkplus-dir t)
      (mapcar (lambda (arg)
                (let ((local-file (concat bookmarkplus-dir arg)))
                  (unless (file-exists-p local-file)
                    (url-copy-file (concat emacswiki-base arg) local-file t))))
              bookmark-files)
      (byte-recompile-directory bookmarkplus-dir 0))
    :commands bmkp-bmenu-list)
#+end_src

** Emacs bookmarks
Save bookmarks immediately.
#+begin_src emacs-lisp :results output silent
  (setq bookmark-save-flag 1)
#+end_src

Further helper functions to add bookmarks:
#+begin_src emacs-lisp :results output silent
  ;;;###autoload
  (defun config-define-bookmark (name path &optional overwrite annotation)
    "Programmatically creates and stores bookmarks into the bookmark file.
  We do this here because as of 2019-04-01T16:13:14+0800 we have no idea
  if there is an existing interface to do this. If one is found this
  will be marked obsolete and we'll move to that instead.

  The bookmark list format is found at `bookmark-alist'.

  NAME - Name of the bookmark.
  PATH - filepath of the bookmark.
  OVERWRITE - if true, overwrite an existing bookmark of the same name
  if one currently exists.
  ANNOTATION - Optional annotation of the bookmark.

  If PATH does not point to anywhere valid, this function is a no-op and
  no bookmark will be created."
    (require 'bookmark)
    (when (file-exists-p path)
      (let* ((annot (if annotation annotation ""))
             (alist `((filename . ,path)
                      (front-context-string . "")
                      (rear-context-string . "")
                      (position . 0)
                      (annotation . ,annot))))
         (bookmark-store name alist overwrite))))
#+end_src

#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "bm" 'list-bookmarks)
#+end_src

#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "dd" '(lambda ()
                              (interactive)
                              (require 'counsel)
                              (counsel-bookmark)))
#+end_src

* Copy as Format
The only reason I'm keeping this and not discarding it is because it's currently
- A monument to my hubris
- Actually a pretty cool attempt at hacking elisp

#+begin_src emacs-lisp :results output silent  (use-package copy-as-format
  (use-package copy-as-format
    :straight (:host github :repo "sshaw/copy-as-format")
    :commands (copy-as-format))
   ;;  :init
   ;;  (evil-define-operator as-format (beg end &optional format-specifier)
   ;;    :repeat nil
   ;;    :move-point nil
   ;;    (interactive "<r>")
   ;;    (let ((temp-buffer (generate-new-buffer "copy-as-format-temp")))
   ;;      (copy-to-buffer temp-buffer beg end)
   ;;      (with-current-buffer temp-buffer
   ;;        (mark-whole-buffer)
   ;;        (copy-as-format))))
   ;; (evil-ex-define-cmd "copy-as-format" 'as-format))
#+end_src

* Studlify operator
#+begin_src emacs-lisp :results output silent
  (evil-define-operator evil-studlify (beg end)
    (studlify-region beg end))
#+end_src

#+begin_src emacs-lisp :results output silent
  (general-define-key :keymaps '(normal visual)
    "g S" 'evil-studlify)
#+end_src

Or evil-spongebob if you want to think of it that way.

* Go Mode                                                             :major:
#+begin_src emacs-lisp :results output silent
  (use-package go-mode
    :straight (:host github :repo "dominikh/go-mode.el")
    :mode ("\\.go\\'" . go-mode))
#+end_src

* Elfeed
#+begin_src emacs-lisp :results output silent
  (defconst user-rss-feed-file
    (locate-user-emacs-file "feeds.org")
    "Points to config.org")

  (defun find-user-rss-feed-file ()
    "Edit `user-rss-feed-file' without opening a new window."
    (interactive)
    (find-file user-rss-feed-file))

  (evil-ex-define-cmd "feed[s]" 'find-user-rss-feed-file)
#+end_src

#+begin_src emacs-lisp :results output silent
  (use-package elfeed
    :straight (:host github :repo "skeeto/elfeed")
    :ensure-system-package
    (curl . "choco install -y curl")
    :commands (elfeed)
    :custom
    (elfeed-search-title-max-width
     80
     "Update the max width of the title")
    (elfeed-search-filter
     "@1-week-ago +unread +hot "
     "The trailing space is so that adding additional tags to filter
     won't be painful.")
    (elfeed-search-date-format
     (list "%F %R" 16 :left)
     "Make the timestamps more useful")
    :general
    (elfeed-show-mode-map
     :states '(normal motion)
      "g O" (lambda ()
              (interactive)
              (let ((browse-url-browser-function 'eww-browse-url))
                (elfeed-show-visit t)))
      "SPC"   nil
      "<SPC>" nil)
    (elfeed-search-mode-map
     :states '(normal motion)
     "g x"  'elfeed-search-browse-url ;; "g o" also does this in normal mode
     "g r"  'elfeed-search-fetch-visible
     "SPC"   nil
     "<SPC>" nil)
    :hook (elfeed-show-mode . (lambda () (setq-local truncate-lines nil)))
    :init
    (evil-define-command my-custom-elfeed (cmd)
      (interactive "<a>")
      (cond
       ((string= cmd "feeds") (find-user-rss-feed-file))
       ((string= cmd "reload") (reload-rss-feed-file))
       ((string= cmd "log") (switch-to-buffer (elfeed-log-buffer)))
       (t (elfeed))))
    (evil-ex-define-cmd "el[feed]" 'my-custom-elfeed))
#+end_src

** Elfeed org
This is really really slow
#+begin_src emacs-lisp :results output silent
  (use-package elfeed-org
    :straight (:host github :repo "remyhonig/elfeed-org")
    :commands (elfeed-org
               rmh-elfeed-org-process)
    :custom
    (rmh-elfeed-org-files (list (locate-user-emacs-file "feeds.org")))
    :init
    ;; We do it like this because we need this lazy loaded, but called
    ;; *before* `elfeed' is called
    (with-eval-after-load 'elfeed
      (elfeed-org))
    :init
    (defun reload-rss-feed-file ()
      (interactive)
      (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id)))
#+end_src

** Elfeed goodies
#+begin_src emacs-lisp :results output silent
  ;; (use-package elfeed-goodies
  ;;   :straight (:host github :repo "algernon/elfeed-goodies")
  ;;   :after elfeed
  ;;   :general
  ;;   (elfeed-show-mode-map
  ;;    :states 'normal
  ;;    "f" 'elfeed-goodies/show-ace-link
  ;;    "F" 'elfeed-goodies/show-ace-link)
  ;;   :custom
  ;;   (elfeed-goodies/entry-pane-position 'bottom))
  ;; ;; :config
  ;; ;; (elfeed-goodies/setup)
  ;; ;; (remove-hook 'elfeed-new-entry-hook #'elfeed-goodies/html-decode-title))
#+end_src

* Ace Link
#+begin_src emacs-lisp :results output silent
  (use-package avy
    :disabled t
    :straight (:host github :repo "abo-abo/avy"))
#+end_src

#+begin_src emacs-lisp :results output silent
  ;; (use-package ace-link
  ;;   :straight (:host github :repo "abo-abo/ace-link")
  ;;   :commands (ace-link-eww))
#+end_src

* Info mode
#+begin_src emacs-lisp :results output silent
  ;; (general-define-key
  ;;  :keymaps 'Info-mode-map
  ;;   "f" 'ace-link-info
  ;;   "F" 'ace-link-info)
  (general-define-key
   :keymaps 'Info-mode-map
   :states 'normal
    "]]" 'Info-next
    "[[" 'Info-prev)
#+end_src

* Eww
#+begin_src emacs-lisp :results output silent
  ;; (use-package eww
  ;;   :commands (eww)
  ;;   :general
  ;;   (:keymaps 'eww-mode-map
  ;;    :states '(normal)
  ;;    "f" 'ace-link-eww
  ;;    "F" 'ace-link-eww))
#+end_src
* Hl Block Mode
Wait a bit for the code to mature.

#+begin_src emacs-lisp :results output silent
  (use-package hl-block-mode
    :disabled t
    :straight (:host github :repo "ideasman42/emacs-hl-block-mode"))
#+end_src

* Alert
with =org-pomodoro= playing sounds now (pleasant ones), using the fringe
now becomes too noisy.

#+begin_src emacs-lisp :results output silent
  (use-package alert
    :straight (:host github :repo "jwiegley/alert" :flavor melpa)
    :commands alert)
  ;; :custom
  ;; (alert-default-style 'fringe))
#+end_src

* Sound-wav
=sound-wav= is used for =org-pomodoro=.

#+begin_src emacs-lisp :results output silent
  (use-package sound-wav
    :straight (:host github :repo "syohex/emacs-sound-wav")
    :commands sound-wav-play)
#+end_src

* Counsel-etags
#+begin_src emacs-lisp :results output silent
  (use-package counsel-etags
    :straight (:host github :repo "redguardtoo/counsel-etags")
    :commands (counsel-etags-find-tag-at-point)
    :general
    (:keymaps 'prog-mode-map
     :states 'normal
     "<f12>" 'counsel-etags-find-tag-at-point)
    :custom
    (tags-revert-without-query t)
    (large-file-warning-threshold nil)
    (counsel-etags-tags-program
     "ctags -e -L"
     "Assuming we use *exuberant ctags*")
    (counsel-etags-tags-program
     (lambda (scan)
       (require 'f)
       ;; (let ((scan (if (boundp 'projectile-project-root)
       ;;                 (projectile-project-root)
       ;;                 scan-dir)))
       (message "updating %s" scan)
       (let ((tags-file (counsel-etags-get-tags-file-path scan))
             (command (string-join
                       (list counsel-etags-tags-program
                             ;; "-o" (concat (directory-file-name scan-dir) "/TAGS")
                             (string-join (mapcar (lambda (file)
                                                    (concat "\"" file "\""))
                                                  (f-entries scan))
                                          " "))
                       " ")))
         (message "with command: %s" command)
         (counsel-etags-async-shell-command command tags-file)))
     "Assuming we use exuberant ctags. For some reason `projectile-project-root' binds to emacs.d.")
    :hook
    (prog-mode . (lambda ()
                   (add-hook 'after-save-hook
                             'counsel-etags-virtual-update-tags
                             'append 'local)))
    :ensure-system-package
    (ctags . "choco install -y ctags"))
#+end_src

* ctags
#+begin_src emacs-lisp :results output silent
  (use-package ctags-update
    :straight (:host github :repo "jixiuf/ctags-update")
    :hook
    (prog-mode . turn-on-ctags-auto-update-mode)
    :commands (ctags-global-update-mode
               ctags-update
               turn-on-ctags-auto-update-mode))
#+end_src

* Seml-mode
#+begin_src emacs-lisp :results output silent
  (use-package seml-mode
    :defer 20
    :straight (:host github :repo "conao3/seml-mode.el"))
#+end_src

* Annotations
Might be better done as an ex mode command or something.

#+begin_src emacs-lisp :results output silent
  (use-package annot
    :straight (:host github :repo "ghoshi/annot"
               :files (:defaults "src/annot.el"))
    :general
    (:keymaps '(normal visual)
     :prefix my-default-evil-leader-key
     "//" 'annot-edit/add
     "/d" 'annot-remove)
    (:keymaps 'normal
     :prefix my-default-evil-leader-key
     "/n" 'annot-goto-next
     "/N" 'annot-goto-previous
     "/c" 'annot-to-comment))
#+end_src

* Ivy

** Prescient
#+begin_src emacs-lisp :results output silent
  (use-package prescient
    :straight (:host github :repo "raxod502/prescient.el")
    :after ivy
    :config
    (ivy-prescient-mode))
#+end_src

** Rich Display
#+begin_src emacs-lisp :results output silent
  (use-package ivy-rich
    :straight (:host github :repo "Yevgnen/ivy-rich")
    :defer 23
    :config
    (ivy-rich-mode))
#+end_src

* Company
#+begin_src emacs-lisp :results output silent
  (use-package company-mode
    :straight (:host github :repo "company-mode/company-mode")
    :commands (company-mode-on
               company-mode)
    :general
    (company-active-map
     "C-w" nil) ;; don't override vim controls
    :custom
    (company-idle-delay 2)
    :hook
    (prog-mode . company-mode))
#+end_src

* Flycheck
#+begin_src emacs-lisp :results output silent
  (use-package flycheck
    :straight (:host github :repo "flycheck/flycheck")
    :hook
    (prog-mode . global-flycheck-mode))
#+end_src

* Language Server Protocol
#+begin_src emacs-lisp :results output silent
  (use-package lsp-mode
    :straight (:host github :repo "emacs-lsp/lsp-mode")
    :hook
    (prog-mode . lsp-mode))
#+end_src

* Code Folding
#+begin_src emacs-lisp :results output silent
  (use-package origami
    :straight (:host github :repo "gregsexton/origami.el")
    :disabled t
    :after evil
    :hook
    (prog-mode . origami-mode)
    :config
    (global-origami-mode))
#+end_src

** Vimish Fold
#+begin_src emacs-lisp :results output silent
  (use-package vimish-fold
    :straight (:host github :repo "mrkkrp/vimish-fold")
    :after evil
    :config
    (vimish-fold-global-mode))
#+end_src

* Rot13
Note that while the buffer will look rot13 encrypted, the final saved
file will not itself be encrypted.

#+begin_src emacs-lisp :results output silent
  (evil-ex-define-cmd "rot[13]" 'toggle-rot13-mode)
#+end_src

* PlantUML mode
[[http://plantuml.com/index][Reference]]

#+begin_src emacs-lisp :results output silent
  (use-package plantuml-mode
    :straight (:host github :repo "skuro/plantuml-mode")
    :commands (plantuml-mode)
    :custom
    (plantuml-output-type "txt"
                          "Display using glorious text")
    (plantuml-default-exec-mode 'executable)
    :ensure-system-package
    (plantuml . "choco install -y plantuml")
    :mode "\\.plantuml\\'"
    :init
    (with-eval-after-load 'org-src
      (cl-pushnew '("plantuml" . plantuml) org-src-lang-modes)))
#+end_src

* Hex conversion
#+begin_src emacs-lisp :results output silent
  (use-package 0xc
    :straight (:host github :repo "AdamNiederer/0xc")
    :commands (0xc-convert
               0xc-convert-point))
#+end_src

* Zeal documentation at point
#+begin_src emacs-lisp :results output silent
  (use-package zeal-at-point
    :straight (:host github :repo "jinzhu/zeal-at-point")
    :commands zeal-at-point)
#+end_src

* Edn format
This is closer to the json serialization/deserialization module.

#+begin_src emacs-lisp :results output silent
  (use-package edn
    :straight (:host github :repo "expez/edn.el")
    :commands (edn-read
               edn-print-string))
#+end_src

* Novel reading
#+begin_src emacs-lisp :results output silent
  (use-package nov
    :straight (:host github :repo "wasamasa/nov.el")
    :mode ("\\.epub\\'" . nov-mode))
#+end_src
* Glasses-mode
Converts between camelCase and snake_case visually, without changing
the underlying format
* Hexl-mode

* Fill Column Indicator
#+begin_src emacs-lisp :results output silent
  (use-package fill-column-indicator
    :straight (:host github :repo "alpaker/fill-column-indicator")
    :commands (fci-mode))
#+end_src

* Devdocs
#+begin_src emacs-lisp :results output silent
  (use-package devdocs
    :straight (:host github :repo "skeeto/devdocs-lookup")
    :commands (devdocs-lookup)
    :custom
    (evil-lookup-func '(lambda ()
                         (call-interactively 'devdocs-lookup)))
    :config
    (devdocs-setup))
#+end_src

* todotxt
#+begin_src emacs-lisp :results output silent
  (use-package todotxt
    :straight (:host github :repo "rpdillon/todotxt.el")
    :commands todotxt)
#+end_src

* Persistent scratch
#+begin_src emacs-lisp :results output silent
  (use-package persistent-scratch
    :straight (:host github :repo "Fanael/persistent-scratch")
    :disabled t ;;  6 seconds to load lmao
    :config
    (persistent-scratch-setup-default))
#+end_src
