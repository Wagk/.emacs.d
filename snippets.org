#+TITLE: Snippets Collection
#+AUTHOR: org-sync-snippets

* c++-mode

** cpp-class

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-class
  # -*- mode: snippet -*-
  # name: cpp-class
  # key: class
  # --
  class ${1:Bar}
  {
  public:
  
    $1() = default;
    $1(const $1&) = default;
    $1($1&&) = default;
    $1& operator=(const $1&) = default;
    $1& operator=($1&&) = default;
    ~$1() = default;
    $1& operator=(const $1& rhs) = default;
  
  private:
  };
#+END_SRC

** cpp-comment-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-comment-block
  # -*- mode: snippet -*-
  # name: cpp-comment-block
  # key: C
  # --
  /*
    $0
  */
#+END_SRC

** cpp-constructor

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-constructor
  # -*- mode: snippet -*-
  # key: ctor
  # name: cpp-constructor
  # --
  ${1:class}::$1($2) $3
  {
    $0
  }
#+END_SRC

** cpp-destructor

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-destructor
  # -*- mode: snippet -*-
  # name: cpp-destructor
  # key: dtor
  # --
  ${1:class}::~$1()
  {
    $0
  }
#+END_SRC

** cpp-docstring

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-docstring
  # -*- mode: snippet -*-
  # name: cpp-docstring
  # key: d
  # --
  /** $0
  */
  
#+END_SRC

** cpp-else

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-else
  # -*- mode: snippet -*-
  # name: cpp-else
  # key: else
  # --
  else {
       $0
  }
#+END_SRC

** cpp-enum

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-enum
  # -*- mode: snippet -*-
  # name: cpp-enum
  # key: enum
  # --
  enum %1 {
       %0
  }
#+END_SRC

** cpp-for

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-for
  # -*- mode: snippet -*-
  # name: cpp-for
  # key: for
  # --
  for(${1:int i}; ${2:cond}; ${3:++i}) {
  $0
  }
#+END_SRC

** cpp-for-range

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-for-range
  # -*- mode: snippet -*-
  # name: cpp-for-range
  # key: forr
  # --
  for(${1:const auto& elem}: ${2:container}) {
  $0
  }
#+END_SRC

** cpp-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-function
  # -*- mode: snippet -*-
  # key: def
  # name: cpp-function
  # --
  ${3:void} ${1:foo}($2)${4:
  {
    $0
  }}
#+END_SRC

** cpp-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-if
  # -*- mode: snippet -*-
  # name: cpp-if
  # key: if
  # --
  if(${1:cond}){
  $0
  }
#+END_SRC

** cpp-include

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-include
  # -*- mode: snippet -*-
  # name: cpp-include
  # key: inc
  # --
  #include $0
#+END_SRC

** cpp-lambda

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-lambda
  # -*- mode: snippet -*-
  # name: cpp-lambda
  # key: defl
  # --
  [$1]($2){$0}
#+END_SRC

** cpp-main

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-main
  # -*- mode: snippet -*-
  # name: cpp-main
  # key: main
  # --
  int main(${1:int argc, char* argv[]})
  {
    $0
  }
#+END_SRC

** cpp-member-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-member-function
  # -*- mode: snippet -*-
  # key: defm
  # name: cpp-member-function
  # --
  ${4:void} ${1:class}::${2:foo}($3) $5
  {
    $0
  }
  
#+END_SRC

** cpp-namespace

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-namespace
  # -*- mode: snippet -*-
  # name: cpp-namespace
  # key: name
  # --
  namespace ${1:nsp}
  {
    $0
  } // $1
#+END_SRC

** cpp-operator-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-operator-function
  # -*- mode: snippet -*-
  # key: defo
  # name: cpp-operator-function
  # --
  ${1:class::}operator${2: opr}(${3:params}) ${4:const
  {
    $0
  }}
#+END_SRC

** cpp-struct

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-struct
  # -*- mode: snippet -*-
  # key: struct
  # name: cpp-struct
  # --
  struct $1
  {
    $0
  };
#+END_SRC

** cpp-template-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-template-function
  # key: deft
  # name: cpp-template-function
  # --
  template<${4:typename T}>
  ${3:void} ${1:foo}(${2:void})${5:
  {
    $0
  }}
#+END_SRC

** cpp-while

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/c++-mode/cpp-while
  # -*- mode: snippet -*-
  # name: cpp-while
  # key: while
  # --
  while ($1) {
      $0
  }
#+END_SRC

* emacs-lisp-mode

** elisp-add-hook

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/elisp-add-hook
  # -*- mode: snippet -*-
  # name: elisp-add-hook
  # key: hook
  # --
  (add-hook '$1 '$0)
#+END_SRC

** elisp-autoload

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/elisp-autoload
  # -*- mode: snippet -*-
  # name: elisp-autoload
  # key: autoload
  # expand-env: ((yas-indent-line 'fixed))
  # --
  ;;;###autoload
#+END_SRC

** elisp-const

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/elisp-const
  # -*- mode: snippet -*-
  # name: elisp-const
  # key: const
  # --
  (defconst $1)
#+END_SRC

** elisp-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/elisp-function
  # -*- mode: snippet -*-
  # name: elisp-function
  # key: def
  # --
  (defun ${1:foo} ($2)
         "${3:docstring for $1}"
         $0)
#+END_SRC

** elisp-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/elisp-if
  # -*- mode: snippet -*-
  # name: elisp-if
  # key: if
  # --
  (if ${1:cond}
      ${2:then}
    ${3:else})
#+END_SRC

** elisp-let

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/elisp-let
  # -*- mode: snippet -*-
  # name: elisp-let
  # key: let
  # --
  (let ($1)
      $0)
#+END_SRC

** new-package

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/new-package
  # name: new personal configuration file empty template
  # key: ;;;;
  # --
  ;;; `(file-name-nondirectory buffer-file-name)` --- $1
  
  ;;; Commentary:
  
  ;;; Code:
  (require 'config-package)
  
  $0
  
  (provide '`(file-name-base buffer-file-name)`)
  
  ;;; `(file-name-nondirectory buffer-file-name)` ends here
#+END_SRC

** require

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/require
  # -*- mode: snippet -*-
  # name: require
  # key: (req
  # Note that in our config we auto-close the paren, so a matching
  # brace should be generated
  # --
  (require '$0
#+END_SRC

** use-package

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/use-package
  # -*- mode: snippet -*-
  # name: use-package
  # key: (use
  Note that because our current config performs auto matching of parens,
  not closing this sexp seems to deliver the desired output
  # --
  (use-package $1
#+END_SRC

* groovy-mode

** groovy-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/groovy-mode/groovy-if
  # -*- mode: snippet -*-
  # name: groovy-if
  # key: if
  # --
  if (${1:pred}) {
     $0
  }
#+END_SRC

** groovy-sh

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/groovy-mode/groovy-sh
  # -*- mode: snippet -*-
  # name: sh
  # key: sh
  # --
  sh(script: ${1:command}, returnStdout: ${2:true}).trim()
#+END_SRC

** groovy-try-catch

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/groovy-mode/groovy-try-catch
  # -*- mode: snippet -*-
  # name: try-catch
  # key: try
  # --
  try {
  
      $0
  
  } catch ($1) {
  
        $2
  
  } finally {
  
  	$3
  
  }
  
#+END_SRC

** groovy-var

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/groovy-mode/groovy-var
  # -*- mode: snippet -*-
  # name: var
  # key: $
  # --
  \$\{${1:variable}\}
#+END_SRC

* js2-mode

** javascript-block-comment

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/javascript-block-comment
  # -*- mode: snippet -*-
  # name: javascript-block-comment
  # key: C
  # --
  /*
    $0
  */
#+END_SRC

** javascript-class

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/javascript-class
  # key: class
  # name: javascript-class
  # --
  class ${1:Bar}${2: extends ${3:Boo}} {
      $0
  }
#+END_SRC

** javascript-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/javascript-function
  # -*- mode: snippet -*-
  # name: javascript-function
  # key: def
  # --
  function$1($2){
    $0
  }
#+END_SRC

** javascript-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/javascript-if
  # -*- mode: snippet -*-
  # name: javascript-if
  # key: if
  # --
  if (${1:cond}) {
    $0
  }
#+END_SRC

** javascript-if-else

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/javascript-if-else
  # -*- mode: snippet -*-
  # name: javascript-if-else
  # key: ife
  # --
  if (${1:cond}) {
    $2
  } else {
    $3
  }
#+END_SRC

** js-arrow-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-arrow-function
  # -*- mode: snippet -*-
  # name: js-arrow-function
  # key: defl
  # --
  $1 => $0
#+END_SRC

** js-docstring

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-docstring
  # -*- mode: snippet -*-
  # name: js-docstring
  # key: d
  # --
  /** $0
  */
#+END_SRC

** js-else

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-else
  # -*- mode: snippet -*-
  # name: js-else
  # key: else
  # --
  else {
       $0
  }
#+END_SRC

** js-for

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-for
  # -*- mode: snippet -*-
  # name: js-for
  # key: for
  # --
  for($1;$2;$3) {
      $0
  }
#+END_SRC

** js-for-in

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-for-in
  # -*- mode: snippet -*-
  # key: fori
  # name: js-for-in
  # for-in runs through only the keys/indexes of the container, which means it
  # does *NOT* work like a cpp range-for
  # --
  for($1 in $2) {
         $0
  }
#+END_SRC

** js-for-of

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-for-of
  # -*- mode: snippet -*-
  # name: js-for-of
  # key: foro
  # for-of statements iterate through the values of the array, not the key
  # (or index)
  # --
  for($1 of $2) {
         $0
  }
#+END_SRC

** js-function-async

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-function-async
  # -*- mode: snippet -*-
  # name: js-function-async
  # key: defa
  # --
  async function$1($2){
        $0
  }
#+END_SRC

** js-print

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-print
  # -*- mode: snippet -*-
  # name: js-print
  # key: print
  # --
  console.log($0)
#+END_SRC

** js-promise

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-promise
  # -*- mode: snippet -*-
  # name: js-promise
  # key: promise
  # --
  new Promise((resolve, reject) => {
      $0
  });
#+END_SRC

** js-strict-mode

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-strict-mode
  # -*- mode: snippet -*-
  # name: js-strict-mode
  # key: strict
  # --
  'use strict';$0
#+END_SRC

** js-try-catch

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-try-catch
  # -*- mode: snippet -*-
  # name: js-try-catch
  # key: try
  # --
  try {
      $0
  } catch ($1) {
  
  }
#+END_SRC

** js-while

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/js-while
  # -*- mode: snippet -*-
  # name: js-while
  # key: while
  # --
  while ($1) {
        $0
  }
#+END_SRC

* json-mode

** json-key

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/json-mode/json-key
  # -*- mode: snippet -*-
  # name: json-key
  # key: :
  # --
  "$1" : ${2:null}$0
#+END_SRC

* ledger-mode

** ledger-transaction

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/ledger-mode/ledger-transaction
  # key: pp
  # name: ledger-transaction
  # expand-env: ((yas-indent-line 'fixed))
  # --
  `(format-time-string "%Y-%m-%d")` * $0
  
#+END_SRC

* markdown-mode

** markdown-code-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/markdown-mode/markdown-code-block
  # key: ```
  # name: markdown-code-block
  # --
  \`\`\` $1
    $0
  \`\`\`
  
#+END_SRC

* org-mode

** org-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/org-mode/org-block
  # -*- mode: snippet -*-
  # name: org-mode-literal-block
  # key: #
  # --
  #+BEGIN_${1:SRC} $2
  $0
  #+END_$1
  
#+END_SRC

** org-list-with-checkbox

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/org-mode/org-list-with-checkbox
  # -*- mode: snippet -*-
  # key: --
  # name: org-list-with-checkbox
  # --
  - [ ] $0
#+END_SRC

** org-mode-code-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/org-mode/org-mode-code-block
  # -*- mode: snippet -*-
  # name: org-mode-code-block
  # key: src
  # --
  #+BEGIN_SRC ${1:emacs-lisp}
  $0
  #+END_SRC
#+END_SRC

** org-mode-elisp-code-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/org-mode/org-mode-elisp-code-block
  # -*- mode: snippet -*-
  # name: org-mode-elisp-code-block
  # key: elisp
  # --
  #+BEGIN_SRC emacs-lisp
  $0
  #+END_SRC
#+END_SRC

** org-mode-property

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/org-mode/org-mode-property
  # -*- mode: snippet -*-
  # name: org-mode-property
  # key: prop
  # --
  #+PROPERTY: $0
#+END_SRC

* php-mode

** php-block-comment

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-block-comment
  # -*- mode: snippet -*-
  # name: php-block-comment
  # key: C
  # --
  /*
    $0
  */
#+END_SRC

** php-class

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-class
  # -*- mode: snippet -*-
  # name: php-class
  # key: class
  # --
  class $1
  {
    $0
  }
#+END_SRC

** php-docstring-comment-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-docstring-comment-block
  # -*- mode: snippet -*-
  # name: php-docstring-comment-block
  # key: d
  # --
  /** $0
  */
#+END_SRC

** php-else

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-else
  # -*- mode: snippet -*-
  # name: php-else
  # key: else
  # --
  else {
       $0
  }
#+END_SRC

** php-elseif

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-elseif
  # key: elif
  # name: php-elseif
  # --
  elseif ($1) {
         $0
  }
#+END_SRC

** php-foreach

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-foreach
  # -*- mode: snippet -*-
  # name: php-foreach
  # key: fore
  # --
  foreach ($1 as $2) {
          $0
  }
#+END_SRC

** php-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-function
  # -*- mode: snippet -*-
  # name: php-function
  # key: def
  # --
  function ${1:foo}($2)
  {
    $0
  }
#+END_SRC

** php-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-if
  # -*- mode: snippet -*-
  # name: php-if
  # key: if
  # --
  if ($1) {
     $0
  }
#+END_SRC

** php-ifelse

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-ifelse
  # -*- mode: snippet -*-
  # name: php-ifelse
  # key: ife
  # --
  if ($1) {
     $2
  } else {
    $0
  }
#+END_SRC

** php-member-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/php-member-function
  # -*- mode: snippet -*-
  # name: php-member-function
  # key: defm
  # --
  ${3:public} function ${1:foo}($2)
  {
    $0
  }
#+END_SRC

* plantuml-mode

** plantuml-state

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/plantuml-mode/plantuml-state
  # -*- mode: snippet -*-
  # name: plantuml-state
  # key: state
  # --
  state "${1:foo}" as $2$0
#+END_SRC

* prog-mode

** bug

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/bug
  # -*- mode: snippet -*-
  # name: bug
  # key: bb
  # --
  `(yas-with-comment "BUG: ")`
#+END_SRC

** comment

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/comment
  # -*- mode: snippet -*-
  # key: c
  # name: comment
  # --
  `(yas-with-comment "")`
#+END_SRC

** debug

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/debug
  # -*- mode: snippet -*-
  # key: dd
  # name: debug
  # --
  `(yas-with-comment "DEBUG: ")`
#+END_SRC

** fixme

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/fixme
  # -*- mode: snippet -*-
  # name: fixme
  # key: ff
  # --
  `(yas-with-comment "FIXME: ")`
#+END_SRC

** hack

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/hack
  # -*- mode: snippet -*-
  # name: hack
  # key: hh
  # --
  `(yas-with-comment "HACK: ")`
#+END_SRC

** note

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/note
  # -*- mode: snippet -*-
  # name: note
  # key: nn
  # --
  `(yas-with-comment "NOTE: ")`
#+END_SRC

** remove

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/remove
  # -*- mode: snippet -*-
  # name: remove
  # key: rr
  # --
  `(yas-with-comment "REMOVE: ")`
#+END_SRC

** stub

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/stub
  # -*- mode: snippet -*-
  # name: stub
  # key: ss
  # --
  `(yas-with-comment "STUB: ")`
#+END_SRC

** todo

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/prog-mode/todo
  # -*- mode: snippet -*-
  # name: todo
  # key: tt
  # --
  `(yas-with-comment "TODO: ")`
#+END_SRC

* python-mode

** python-argparse-add-argument

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-argparse-add-argument
  # -*- mode: snippet -*-
  # name: python-argparse-add_argument
  # key: aarg
  # --
  ${1:parser}.add_argument(
    '-${2:short arg}',
    '--${3:long arg}',
    help='''
    ${4:argument description}
    ''',
    action='${5:store}',
    type=${6:str},
    default=${7:None},
    dest='${8:$3}'
  )
#+END_SRC

** python-async-def

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-async-def
  # -*- mode: snippet -*-
  # name: python-async-def
  # key: defa
  # --
  async def $1($2)${3:-> ${4:None}}:
        raise NotImplementedError()
#+END_SRC

** python-async-for

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-async-for
  # -*- mode: snippet -*-
  # name: python-async-for
  # key: fora
  # --
  async for ${1:elem} in ${2:container}:
      $0
#+END_SRC

** python-class

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-class
  # -*- mode: snippet -*-
  # name: python-class
  # key: class
  # --
  class ${1:Bar}(${2:object}):
      $0
#+END_SRC

** python-class-member-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-class-member-function
  # key: defm
  # name: python class member function
  # --
  def ${1:foo}(self$2)${3:-> ${4:None}}:
      ${5:raise NotImplementedError()}
#+END_SRC

** python-class-method

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-class-method
  # key: defc
  # name: python-classmethod
  # --
  @classmethod
  def ${1:foo}(cls$2)${3:-> ${4:None}}:
      ${5:raise NotImplementedError()}
#+END_SRC

** python-class-property

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-class-property
  # key: pro
  # name: python-class-property
  # --
  @property
  def ${1:prop}(self)${2:-> ${3:None}}:
      ${4:raise NotImplementedError()}$0
#+END_SRC

** python-class-static-method

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-class-static-method
  # -*- mode: snippet -*-
  # name: python-class-static-method
  # key: defs
  # --
  @staticmethod
  def ${1:foo}($2)${3:-> ${4:None}}:
      ${5:raise NotImplementedError()}
#+END_SRC

** python-def

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-def
  # -*- mode: snippet -*-
  # name: def-python
  # key: def
  # --
  def ${1:foo}($2)${3:-> ${4:None}}:
      ${5:raise NotImplementedError()}
  
#+END_SRC

** python-docstring

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-docstring
  # key: d
  # name: python-docstring
  # expand-env: ((yas-indent-line 'fixed))
  # --
  """$0
  """
#+END_SRC

** python-elif

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-elif
  # -*- mode: snippet -*-
  # name: elif-python
  # key: elif
  # --
  elif ${1:cond}:
      $0
#+END_SRC

** python-for

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-for
  # -*- mode: snippet -*-
  # name: python-for
  # key: for
  # --
  for ${1:elem} in ${2:container}:
      $0
#+END_SRC

** python-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-if
  # -*- mode: snippet -*-
  # name: python-if
  # key: if
  # --
  if ${1:condition}:
     $0
#+END_SRC

** python-if-main

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-if-main
  # -*- mode: snippet -*-
  # name: python-if-main
  # key: ifm
  # --
  if __name__ == "__main__":
     $0
#+END_SRC

** python-init

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-init
  # key: init
  # name: python-init
  # --
  def __init__(self$1)-> None:
      ${2:raise NotImplementedError()}$0
  
#+END_SRC

** python-lambda

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-lambda
  # -*- mode: snippet -*-
  # name: python-lambda
  # key: defl
  # --
  lambda $1: $0
#+END_SRC

** python-multiline-string

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-multiline-string
  # -*- mode: snippet -*-
  # name: python-multiline-string
  # key: """
  # --
  """
  $0
  """
#+END_SRC

** python-parse-args

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-parse-args
  # -*- mode: snippet -*-
  # name: python-parse_args
  # key: pargs
  # --
  def parse_args():
      """${1:Docstring for parse_args}
      params:
  
      """
      parser = argparse.ArgumentParser(${2:})
  
      $0
  
      return parser.parse_args()
  
#+END_SRC

** python-try

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-try
  # key: try
  # name: python-try
  # --
  try:
      ${2:pass}
  except ${1:Exception as e}:
      raise e
#+END_SRC

** python-while

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-while
  # -*- mode: snippet -*-
  # name: python-while
  # key: while
  # --
  while ${1:True}:
        $0
#+END_SRC

** python-with

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/python-with
  # -*- mode: snippet -*-
  # name: python-with
  # key: with
  # --
  with ${1:context}${2: as ${3:alias}}:
       $0
#+END_SRC

* rust-mode

** rust-attribute

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-attribute
  # -*- mode: snippet -*-
  # name: rust-attribute
  # key: #
  # --
  #[$0]
#+END_SRC

** rust-docstring

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-docstring
  # -*- mode: snippet -*-
  # name: rust-docstring
  # key: d
  # --
  /// $0
#+END_SRC

** rust-enum

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-enum
  # -*- mode: snippet -*-
  # name: rust-enum
  # key: enum
  # --
  enum $1 {
      $0
  }
#+END_SRC

** rust-for

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-for
  # -*- mode: snippet -*-
  # name: rust-for
  # key: for
  # --
  for $1 in $2 {
      $0
  }
#+END_SRC

** rust-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-function
  # -*- mode: snippet -*-
  # name: rust-function
  # key: def
  # --
  fn ${1:foo}($2) $3
  {
    $0
  }
#+END_SRC

** rust-if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-if
  # -*- mode: snippet -*-
  # name: rust-if
  # key: if
  # --
  if $1 {
      $0
  }
#+END_SRC

** rust-impl

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-impl
  # -*- mode: snippet -*-
  # name: rust-impl
  # key: impl
  # --
  impl $1 {
      $0
  }
#+END_SRC

** rust-lambda

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-lambda
  # -*- mode: snippet -*-
  # name: rust-lambda
  # key: defl
  # --
  |$1| ${2:{$3}}
#+END_SRC

** rust-loop

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-loop
  # -*- mode: snippet -*-
  # name: rust-loop
  # key: whilet
  # --
  loop {
       $0
  }
#+END_SRC

** rust-match

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-match
  # -*- mode: snippet -*-
  # name: rust-match
  # key: match
  # --
  match $1 {
        $0
  }
#+END_SRC

** rust-member-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-member-function
  # -*- mode: snippet -*-
  # name: rust-member-function
  # key: defm
  # --
  fn $1(&self$2) $3{
      $0
  }
#+END_SRC

** rust-mod

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-mod
  # -*- mode: snippet -*-
  # name: rust-mod
  # key: mod
  # --
  mod $1 {
      $0
  }
#+END_SRC

** rust-print

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-print
  # -*- mode: snippet -*-
  # key: print
  # name: rust-print
  # --
  println!("$0");
#+END_SRC

** rust-public-function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-public-function
  # -*- mode: snippet -*-
  # name: rust-public-function
  # key: defp
  # --
  pub fn $1($2) $3{
      $0
  }
#+END_SRC

** rust-struct

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-struct
  # -*- mode: snippet -*-
  # name: rust-struct
  # key: struct
  # --
  struct $1 {
         $0
  }
#+END_SRC

** rust-test-block

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-test-block
  # -*- mode: snippet -*-
  # key: test
  # name: rust-test-block
  # --
  #[cfg(test)]
  mod tests {
      use super::*;
  
      #[test]
      fn ${1:test}() {
          $0
      }
  }
  
#+END_SRC

** rust-trait

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-trait
  # -*- mode: snippet -*-
  # name: rust-trait
  # key: trait
  # --
  trait $1 {
      $0
  }
#+END_SRC

** rust-while

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/rust-mode/rust-while
  # -*- mode: snippet -*-
  # name: rust-while
  # key: while
  # --
  while $1 {
      $0
  }
#+END_SRC

* snippet-mode

** snippet-mode-modeline

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/snippet-mode/snippet-mode-modeline
  # -*- mode: snippet -*-
  # name: snippet-mode-modeline
  # key: mode
  # --
  # -*- mode: snippet -*-
#+END_SRC

** snippet-template

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/snippet-mode/snippet-template
  # -*- mode: snippet -*-
  # name: snippet-template
  # key: tt
  # --
  \# -*- mode: snippet -*-
  \# name: $1
  \# key: $2
  \# --
  $0
#+END_SRC

* typescript-mode

** .yas-parents

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/typescript-mode/.yas-parents
  js2-mode
  
#+END_SRC

** typescript-export

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/typescript-mode/typescript-export
  # -*- mode: snippet -*-
  # name: typescript-export
  # key: export
  # --
  export { $1 };
#+END_SRC

** typescript-import

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/typescript-mode/typescript-import
  # -*- mode: snippet -*-
  # name: typescript-import
  # key: import
  # --
  import { $1 } from './$2';
#+END_SRC

** typescript-import-wildcard

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/typescript-mode/typescript-import-wildcard
  # -*- mode: snippet -*-
  # name: typescriot-import*
  # key: import*
  # --
  import * as ${2:$1} from '${1:module}';
#+END_SRC

** typescript-interface

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/typescript-mode/typescript-interface
  # -*- mode: snippet -*-
  # name: typescript-interface
  # key: interface
  # --
  interface ${1:name} {
  $0
  }
#+END_SRC

* yaml-mode

** .yas-parents

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/yaml-mode/.yas-parents
  prog-mode
  
#+END_SRC

